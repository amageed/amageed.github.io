<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Ahmad Mageed - Software Ninjaneer</title>
	<link href="http://softwareninjaneer.com/atom.xml" rel="self"/>
	<link href="http://softwareninjaneer.com"/>
	<updated>2015-03-11T06:58:57.581Z</updated>
	<id>http://softwareninjaneer.com</id>
	<author>
		<name>Ahmad Mageed</name>
		<email>your@email.com</email>
	</author>

	
		<entry>
			<title>.NET gotcha: number validation and when unicode attacks!</title>
			<link href="http://softwareninjaneer.com/blog/net-number-validation-and-when-unicode-attacks"/>
			<updated>2014-03-28T22:00:00.000Z</updated>
			<id>http://softwareninjaneer.com/blog/net-number-validation-and-when-unicode-attacks</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;.NET gotcha: number validation and when unicode attacks! | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;.NET gotcha: number validation and when unicode attacks!&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Friday, March 28, 2014&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;Imagine you&amp;#39;re working with .NET and have some numeric input with a specific format that you need to validate and convert the number portion to do something interesting with. You decide to tackle this using regular expressions. &lt;/p&gt;
&lt;p&gt;You get to work, quickly constructing a pattern using the &lt;code&gt;\d&lt;/code&gt; metacharacter to match digits, then use &lt;code&gt;int.Parse&lt;/code&gt; on the match. Everything checks out, your unit tests pass, and you deploy your app. You&amp;#39;re a regex ninja!&lt;/p&gt;
&lt;p&gt;Fast forward and you start noticing errors being logged around your regex. Specifically, exceptions are being thrown on the &lt;code&gt;int.Parse&lt;/code&gt; portion. Surprised, you think, &amp;quot;What?! That&amp;#39;s impossible! The regex is solid. It matches numbers, so how could &lt;code&gt;int.Parse&lt;/code&gt; possibly fail?&amp;quot;&lt;/p&gt;
&lt;p&gt;Well, the hint is in this post&amp;#39;s title. Consider this snippet:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;42&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;^\d+$&quot;&lt;/span&gt;;
Match m = Regex.Match(input, pattern);
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (m.Success) 
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; num;
    &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;.TryParse(m.Value, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; num);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matched number: {0} -- Parsed: {1}&quot;&lt;/span&gt;, input, result);
}
&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
{
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid number: {0}&quot;&lt;/span&gt;, input);
}

&lt;span class=&quot;hljs-comment&quot;&gt;// Matched number: 42 -- Parsed: True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple, right? To get this to fail let&amp;#39;s pass in some Arabic numbers:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\x0664\x0662&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Arabic #42: ٤٢&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// Matched number: ٤٢ -- Parsed: False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the output indicates that the Arabic numbers were valid. The regex matches but &lt;code&gt;int.TryParse&lt;/code&gt; fails. In the scenario I described earlier we used &lt;code&gt;int.Parse&lt;/code&gt;, confident that we would have a valid number, but in this example &lt;code&gt;int.Parse&lt;/code&gt; will throw a &lt;code&gt;FormatException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason is &lt;code&gt;\d&lt;/code&gt; matches more than just 0-9. According &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/20bw873z%28v=vs.110%29.aspx&quot; title=&quot;Character Classes in Regular Expressions&quot;&gt;to MSDN&lt;/a&gt; (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\d&lt;/code&gt; matches any decimal digit. It is equivalent to the &lt;code&gt;\p{Nd}&lt;/code&gt; regular expression pattern, which includes the standard decimal digits 0-9 as well &lt;strong&gt;as the decimal digits of a number of other character sets&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you normally validate numbers using &lt;code&gt;^\d+$&lt;/code&gt; it clearly isn&amp;#39;t enough. There are two ways around this, to limit the valid digits to 0-9:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;[0-9]&lt;/code&gt; instead. It is explicit and will not accept unicode decimal digits.&lt;/li&gt;
&lt;li&gt;Continue using &lt;code&gt;\d&lt;/code&gt; and add &lt;code&gt;RegexOptions.ECMAScript&lt;/code&gt; to use ECMAScript-compliant behavior. This option makes &lt;code&gt;\d&lt;/code&gt; equivalent to &lt;code&gt;[0-9]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An updated snippet with the ECMAScript option follows:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\x0664\x0662&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;^\d+$&quot;&lt;/span&gt;;
Match m = Regex.Match(input, pattern, RegexOptions.ECMAScript);
&lt;span class=&quot;hljs-comment&quot;&gt;// ... same code as before ...&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// Invalid number: ٤٢&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, there are similar issues when using &lt;code&gt;\w&lt;/code&gt; where it isn&amp;#39;t limited to ASCII characters. Refer to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yd1hzczs%28v=vs.110%29.aspx#ECMAScript&quot;&gt;ECMAScript Matching Behavior&lt;/a&gt;. In addition, the same issue applies to &lt;code&gt;Char.IsDigit&lt;/code&gt; and &lt;code&gt;Char.IsLetter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To demonstrate:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\x0664\x0662&quot;&lt;/span&gt;;
Console.WriteLine(Char.IsDigit(input[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])); &lt;span class=&quot;hljs-comment&quot;&gt;// True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next time you reach for &lt;code&gt;\d&lt;/code&gt;, keep these issues in mind! Typically someone will opt for &lt;code&gt;\d&lt;/code&gt; thinking it&amp;#39;s shorter while being unaware of these implications.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/net-number-validation-and-when-unicode-attacks&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/net-number-validation-and-when-unicode-attacks&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/net-number-validation-and-when-unicode-attacks';
		window.disqus_identifier = 'blog-net-number-validation-and-when-unicode-attacks';
		window.disqus_title = '.NET gotcha: number validation and when unicode attacks!';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Regextra: helping you reduce your (problems){2}</title>
			<link href="http://softwareninjaneer.com/blog/introducing-regextra"/>
			<updated>2014-03-10T22:25:00.000Z</updated>
			<id>http://softwareninjaneer.com/blog/introducing-regextra</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Regextra: helping you reduce your (problems){2} | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Regextra: helping you reduce your (problems){2}&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Monday, March 10, 2014&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;I&amp;#39;m a fan of regular expressions and tend to be the go-to guy on teams when it comes to (concoct|conjur)ing patterns. I&amp;#39;ve also &lt;a href=&quot;http://stackoverflow.com/search?tab=votes&amp;amp;q=regex%20user%3a59111&quot;&gt;answered a good amount of regex related questions&lt;/a&gt; on StackOverflow.&lt;/p&gt;
&lt;p&gt;One of the questions that frequently gets asked is how to construct a pattern that enforces passphrase/password validation with a number of criteria. These are the rules you typically see when signing up on the majority of websites: &lt;em&gt;your password must include at least 1 uppercase letter, 1 lowercase letter, 1 digit, 3 oz. Unicorn tears, and 16 scruples of Fluxweed...&lt;/em&gt; you get the idea.&lt;/p&gt;
&lt;p&gt;Other questions revealed a host of handy techniques that I wanted to capture, such as &lt;a href=&quot;http://stackoverflow.com/a/2485044/59111&quot;&gt;splitting strings and including the delimiters&lt;/a&gt;, trimming whitespace, and formatting camel case values.&lt;/p&gt;
&lt;h2 id=&quot;enter-regextra&quot;&gt;Enter Regextra&lt;/h2&gt;
&lt;p&gt;A little over a year ago I started working on a library to address these problems and capture useful solutions. I&amp;#39;ve been working on it on and off and recently devoted much more time to it to add some finishing touches before releasing it on NuGet. Without further ado, I&amp;#39;m finally happy to reveal it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/amageed/Regextra&quot;&gt;Regextra&lt;/a&gt; (pronounced &amp;quot;Rej-extra&amp;quot;) is an open-source .NET library written in C#. It&amp;#39;s well tested, with over 200 unit tests.&lt;/p&gt;
&lt;p&gt;Currently, the library includes the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passphrase Regex Builder&lt;/li&gt;
&lt;li&gt;Named Template Formatting&lt;/li&gt;
&lt;li&gt;Useful regex/string methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over time I hope to add other useful features, and would love to hear any community feedback on what the library accomplishes today. The goal of this project was to address common scenarios, however that&amp;#39;s not to be confused with amassing all sorts of patterns. This is more of a helpful utility, not an encyclopedia of patterns.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Check out the &lt;a href=&quot;https://github.com/amageed/Regextra/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visit the project&amp;#39;s &lt;a href=&quot;http://softwareninjaneer.com/regextra&quot;&gt;demo site&lt;/a&gt; for a chance to try out some client-side validation (using the patterns produced by the &lt;code&gt;PassphraseRegex&lt;/code&gt; builder)&lt;/li&gt;
&lt;li&gt;The extensive &lt;a href=&quot;https://github.com/amageed/Regextra/tree/master/src/Tests&quot;&gt;test suite&lt;/a&gt; is worth a glance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regextra is available via &lt;a href=&quot;https://www.nuget.org/packages/Regextra/&quot;&gt;NuGet&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;mathematica&quot;&gt;PM&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Install&lt;/span&gt;-Package Regextra
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;passphrase-regex-builder&quot;&gt;Passphrase Regex Builder&lt;/h2&gt;
&lt;p&gt;A common question I&amp;#39;ve seen on StackOverflow is how to write code that enforces strong passphrase or password rules. Popular responses tend to tackle the problem by using a regex with look-aheads. I&amp;#39;ve seen this so much that I decided to have fun writing a solution that allowed people to produce regex patterns that would enforce such rules.&lt;/p&gt;
&lt;h3 id=&quot;example-usage&quot;&gt;Example usage&lt;/h3&gt;
&lt;p&gt;The following code generates a pattern to enforce a password of 8-25 characters that requires at least two lowercase letters in the range of &lt;code&gt;a-z&lt;/code&gt; and numbers excluding those in the range of &lt;code&gt;0-4&lt;/code&gt; (i.e., numbers in the &lt;code&gt;5-9&lt;/code&gt; range are acceptable).&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; builder = PassphraseRegex.With.MinLength(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)
                                  .MaxLength(&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;)
                                  .IncludesRange(&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'z'&lt;/span&gt;)
                                  .WithMinimumOccurrenceOf(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
                                  .ExcludesRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);

PassphraseRegexResult result = builder.ToRegex();

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.IsValid)
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.Regex.IsMatch(input))
    {
        &lt;span class=&quot;hljs-comment&quot;&gt;// passphrase meets requirements&lt;/span&gt;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
    {
        &lt;span class=&quot;hljs-comment&quot;&gt;// passphrase is no good&lt;/span&gt;
    }
}
&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
{
    &lt;span class=&quot;hljs-comment&quot;&gt;// check the regex parse exception message for the generated pattern&lt;/span&gt;
    Console.WriteLine(result.Error);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/amageed/Regextra/wiki/PassphraseRegex:-building-passphrase-validation-patterns&quot;&gt;PassphraseRegex wiki&lt;/a&gt; for further details and examples.&lt;/p&gt;
&lt;h2 id=&quot;template-formatting&quot;&gt;Template Formatting&lt;/h2&gt;
&lt;p&gt;Template formatting allows you to perform named formatting on a string template using an object&amp;#39;s matching properties. It&amp;#39;s available via the static &lt;code&gt;Template.Format&lt;/code&gt; method and the string extension method, &lt;code&gt;FormatTemplate&lt;/code&gt;. The formatter features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nested properties formatting&lt;/li&gt;
&lt;li&gt;Dictionary formatting&lt;/li&gt;
&lt;li&gt;Standard/Custom string formatting&lt;/li&gt;
&lt;li&gt;Escaping of properties&lt;/li&gt;
&lt;li&gt;Detailed exception messages to pinpoint missing properties&lt;/li&gt;
&lt;li&gt;Great performance (in part thanks to &lt;a href=&quot;http://code.google.com/p/fast-member/&quot;&gt;FastMember&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;example-usage&quot;&gt;Example usage&lt;/h3&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; order = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;
{
    Description = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Widget&quot;&lt;/span&gt;,
    OrderDate = DateTime.Now,
    Details = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;
    {
        UnitPrice = &lt;span class=&quot;hljs-number&quot;&gt;1500&lt;/span&gt;
    }
};

&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; template = &lt;span class=&quot;hljs-string&quot;&gt;&quot;We just shipped your order of '{Description}', placed on {OrderDate:d}. Your {{credit}} card will be billed {Details.UnitPrice:C}.&quot;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; result = Template.Format(template, order);
&lt;span class=&quot;hljs-comment&quot;&gt;// or use the extension: template.FormatTemplate(order);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the code is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We just shipped your order of &amp;#39;Widget&amp;#39;, placed on 2/28/2014. Your {credit} card will be billed $1,500.00.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/amageed/Regextra/wiki/Template:-named-formatting&quot;&gt;Template wiki&lt;/a&gt; for further details and examples.&lt;/p&gt;
&lt;h2 id=&quot;regexutility-class&quot;&gt;RegexUtility Class&lt;/h2&gt;
&lt;p&gt;This static class features a couple of helpful methods, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Split Methods&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Split&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SplitRemoveEmptyEntries&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SplitIncludeDelimiters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SplitMatchWholeWords&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SplitTrimWhitespace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Formatting Methods&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TrimWhitespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FormatCamelCase&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Named Groups Conversion Methods&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MatchesToNamedGroupsDictionaries&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatchesToNamedGroupsLookup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;split-and-include-delimiters&quot;&gt;Split and Include Delimiters&lt;/h3&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;123xx456yy789&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;[] delimiters = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;xx&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;yy&quot;&lt;/span&gt; };
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = RegexUtility.SplitIncludeDelimiters(input, delimiters);
&lt;span class=&quot;hljs-comment&quot;&gt;// { &quot;123&quot;, &quot;xx&quot;, &quot;456&quot;, &quot;yy&quot;, &quot;789&quot; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;combining-split-options&quot;&gt;Combining Split Options&lt;/h3&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;StackOverflow Stack OverStack&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;[] delimiters = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack&quot;&lt;/span&gt; };
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; splitOptions = SplitOptions.TrimWhitespace | SplitOptions.RemoveEmptyEntries;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = RegexUtility.Split(input, delimiters, splitOptions: splitOptions);
&lt;span class=&quot;hljs-comment&quot;&gt;// { &quot;Overflow&quot;, &quot;Over&quot; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;trimming-whitespace&quot;&gt;Trimming Whitespace&lt;/h3&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = RegexUtility.TrimWhitespace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;   Hello    World   &quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Hello World&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;formatcamelcase&quot;&gt;FormatCamelCase&lt;/h3&gt;
&lt;p&gt;Formats PascalCase (upper CamelCase) and (lower) camelCase words to a friendly format separated by the given delimiter (space by default).&lt;/p&gt;
&lt;p&gt;It properly handles acronyms too. For example &amp;quot;XML&amp;quot; is properly preserved when given an input of &lt;code&gt;&amp;quot;PickUpXMLInFiveDays&amp;quot;&lt;/code&gt;. The result is &lt;code&gt;&amp;quot;Pick Up XML In Five Days&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;RegexUtility.FormatCamelCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PascalCase&quot;&lt;/span&gt;)        &lt;span class=&quot;hljs-comment&quot;&gt;// Pascal Case&lt;/span&gt;
RegexUtility.FormatCamelCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;camelCase42&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// camel_Case_42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;matches-to-named-groups-dictionaries&quot;&gt;Matches To Named Groups Dictionaries&lt;/h3&gt;
&lt;p&gt;Returns an array of &lt;code&gt;Dictionary&amp;lt;string, string&amp;gt;&lt;/code&gt; of each match with the named groups as the keys, and the group&amp;#39;s corresponding value.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;123-456-7890 hello 098-765-4321&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;(?&amp;lt;AreaCode&amp;gt;\d{3})-(?&amp;lt;First&amp;gt;\d{3})-(?&amp;lt;Last&amp;gt;\d{4})&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; results = RegexUtility.MatchesToNamedGroupsDictionaries(input, pattern);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code returns the following result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hnHpjHL.png&quot; alt=&quot;Named Groups Dictionaries&quot;&gt;&lt;/p&gt;
&lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/amageed/Regextra/wiki/RegexUtility:-miscellaneous-string-manipulation-and-regex-operations&quot;&gt;RegexUtility wiki&lt;/a&gt; for further details and examples.&lt;/p&gt;
&lt;h2 id=&quot;check-it-out-feedback-welcome&quot;&gt;Check it out, Feedback Welcome&lt;/h2&gt;
&lt;p&gt;Regextra&amp;#39;s &lt;a href=&quot;https://github.com/amageed/Regextra&quot;&gt;source is on GitHub&lt;/a&gt;, and you can grab it from &lt;a href=&quot;https://www.nuget.org/packages/Regextra/&quot;&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please try it out and let me know what you think. Feedback is welcome, so feel free to leave comments or &lt;a href=&quot;https://github.com/amageed/Regextra/issues&quot;&gt;open issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/introducing-regextra&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/introducing-regextra&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/introducing-regextra';
		window.disqus_identifier = 'blog-introducing-regextra';
		window.disqus_title = 'Regextra: helping you reduce your (problems){2}';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Creating an AngularJS reset field directive</title>
			<link href="http://softwareninjaneer.com/blog/creating-an-angularjs-reset-field-directive"/>
			<updated>2014-01-21T21:00:00.000Z</updated>
			<id>http://softwareninjaneer.com/blog/creating-an-angularjs-reset-field-directive</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Creating an AngularJS reset field directive | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Creating an AngularJS reset field directive&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Tuesday, January 21, 2014&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;Do you know those helpful little &lt;code&gt;X&lt;/code&gt; icons that appear in form fields as you&amp;#39;re typing? The ones that you click on to clear the entire text entry? I decided to build an AngularJS directive called &lt;code&gt;resetField&lt;/code&gt; to do just that, with the additional goal of clearing the underlying &lt;code&gt;ngModel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re eager to grab the code or check out the demo, here you go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code: &lt;a href=&quot;https://github.com/amageed/angular-resetfield&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo: &lt;a href=&quot;http://jsbin.com/OgogiwEV/22/edit?html,css,js,output&quot;&gt;JSBin demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some browsers include this feature out of the box. IE10+ does for text related input elements, and WebKit browsers might add icons for input types of search. You could write a directive that detects the native support and keeps it (by returning and doing nothing), as in the case of IE10+, or opt to apply your directive to all browsers and disable any native functionality. I opted for the latter since it keeps the look and feel consistent across browsers. Either way, you would have to write code to detect the feature, or CSS to disable it.&lt;/p&gt;
&lt;p&gt;The following list covers my desired behavior for this feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Limited to input elements with types that make sense to reset (mainly text fields that get no special browser control appearance)&lt;/li&gt;
&lt;li&gt;Limited to elements using &lt;code&gt;ngModel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Hide the built in clear field icon for IE10+ that&amp;#39;s applied to input elements&lt;/li&gt;
&lt;li&gt;Hide the built in WebKit search cancel icon that&amp;#39;s applied when &lt;code&gt;type=&amp;quot;search&amp;quot;&lt;/code&gt; is used&lt;/li&gt;
&lt;li&gt;Icon appears inside the textbox&lt;/li&gt;
&lt;li&gt;Icon visibility is dependent on the input&amp;#39;s content (hidden when empty, otherwise visible)&lt;/li&gt;
&lt;li&gt;Icon appears when the input gains focus and it isn&amp;#39;t empty&lt;/li&gt;
&lt;li&gt;Icon disappears when the input field loses focus&lt;/li&gt;
&lt;li&gt;Add some CSS3 Animations with &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get an idea of how this would look I began with an input field, followed by a &lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt; icon. I added CSS to right-align the icon and gave the field some padding so text wouldn&amp;#39;t clash with the icon. Handling the built-in WebKit and IE10+ icons was a matter of disabling the appropriate styles by using the relevant CSS pseudo-classes on our selectors. This CSS covers most of the style related items on my list, except for animations (I&amp;#39;ll get to that later).&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* prevent text from appearing underneath the icon */&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-attr_selector&quot;&gt;[reset-field]&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;padding-right&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;px&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;/* hide the built-in IE10+ clear field icon */&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-attr_selector&quot;&gt;[reset-field]&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;::-ms-clear&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;/* hide cancel icon for search type */&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-attr_selector&quot;&gt;[reset-field]&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;::-webkit-search-cancel-button&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-webkit-appearance&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;/* icon styles */&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-attr_selector&quot;&gt;[reset-field]&lt;/span&gt; + &lt;span class=&quot;hljs-class&quot;&gt;.fa&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;px&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-hexcolor&quot;&gt;#C0C0C0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; default&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- head content --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- body content --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;reset-field&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- the icon will be added by the directive and is shown here for clarity --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;fa fa-times-circle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should yield something similar to this: &lt;img src=&quot;http://softwareninjaneer.com/images/ResetFieldExample.png&quot; alt=&quot;Reset field icon appearance&quot;&gt;&lt;/p&gt;
&lt;p&gt;The idea is for an input element to use the &lt;code&gt;reset-field&lt;/code&gt; directive, which will add the icon next to the element automatically. Next, I needed a way to toggle the icon&amp;#39;s visibility. I also wanted the icon to be clickable to trigger the reset. With these two issues in mind, I added some directives to the icon&amp;#39;s markup:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ng-show&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;enabled&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ng-mousedown&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;reset()&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;fa fa-times-circle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice something odd? I&amp;#39;m using &lt;code&gt;ng-mousedown&lt;/code&gt; instead of &lt;code&gt;ng-click&lt;/code&gt;. The latter worked for me originally, but eventually I added a &lt;code&gt;blur&lt;/code&gt; binding on the input element, and that interfered with clicking on the icon (the icon&amp;#39;s visibility would be toggled without affecting the content). Since the &lt;code&gt;mousedown&lt;/code&gt; event gets fired prior to the &lt;code&gt;blur&lt;/code&gt; event, using &lt;code&gt;ng-mousedown&lt;/code&gt; resolves the issue.&lt;/p&gt;
&lt;p&gt;By updating &lt;code&gt;scope.enabled&lt;/code&gt; I can toggle the icon&amp;#39;s visibility. The &lt;code&gt;scope.reset()&lt;/code&gt; function will handle the reset whenever the icon is clicked. The icon markup uses typical Angular directives, but on its own it&amp;#39;s just markup. To get it to function as expected it needs to be compiled and given a scope. To achieve this I use the &lt;a href=&quot;http://docs.angularjs.org/api/ng.$compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; service&lt;/a&gt;, which returns a linker function that takes the &lt;code&gt;scope&lt;/code&gt; available from the directive&amp;#39;s link function.&lt;/p&gt;
&lt;p&gt;To illustrate how this fits into the overall directive, consider the following (incomplete) setup to get a sense of the structure thus far:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;angular.module(&lt;span class=&quot;hljs-string&quot;&gt;'app'&lt;/span&gt;).directive(&lt;span class=&quot;hljs-string&quot;&gt;'resetField'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($compile)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ngModel'&lt;/span&gt;,
    scope: {},
    link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(scope, element)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// compiled reset icon template&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; template = $compile(&lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;i ng-show=&quot;enabled&quot; ng-mousedown=&quot;reset()&quot; class=&quot;fa fa-times-circle&quot;&amp;gt;&amp;lt;/i&amp;gt;'&lt;/span&gt;)(scope);
      element.after(template);
    }
  };
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far the directive uses an isolated scope and the link function gives us access to the scope and target element. The directive depends on &lt;code&gt;$compile&lt;/code&gt;, and is limited to elements with an underlying model since it requires the &lt;code&gt;ngModel&lt;/code&gt; controller. The icon markup is compiled with an isolated scope. Next, the compiled template is appended next to the target element.&lt;/p&gt;
&lt;p&gt;To limit it to input elements I will test the element&amp;#39;s &lt;code&gt;nodeName&lt;/code&gt;. To access the element though, I need to access &lt;code&gt;element[0]&lt;/code&gt; to get the actual DOM element rather than the wrapped jqLite/Angular version. I also want to limit it to input types that make sense to have this icon applied to (i.e., mainly text related fields, not radio buttons, or date fields that will be rendered differently by browsers). I can achieve this by inspecting the &lt;code&gt;type&lt;/code&gt; property of the element&amp;#39;s attributes. The link function&amp;#39;s third parameter gives me access to the attributes (&lt;code&gt;attrs&lt;/code&gt; below).&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(scope, element, attrs)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// limit to input element of specific types&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; inputTypes = &lt;span class=&quot;hljs-regexp&quot;&gt;/text|search|tel|url|email|password/i&lt;/span&gt;;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (el[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].nodeName !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;INPUT&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resetField is limited to input elements&quot;&lt;/span&gt;);
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!inputTypes.test(attrs.type))
    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input type for resetField: &quot;&lt;/span&gt; + attrs.type);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I&amp;#39;ll add the logic that determines when to show or hide the icon. I want to show the icon when the element has content. Binding to the element&amp;#39;s &lt;code&gt;change&lt;/code&gt; event is the easiest way to handle this. Hopefully your app targets modern browsers which support the &lt;code&gt;change&lt;/code&gt; event, otherwise you might need to resort to &lt;code&gt;keyup&lt;/code&gt; and &lt;code&gt;keydown&lt;/code&gt; type of events which can get a little messy when you want to detect changes to handle the delete/backspace/ctrl/shift keys. The &lt;code&gt;change&lt;/code&gt; event takes the hassle out of all that and works intuitively.&lt;/p&gt;
&lt;p&gt;To check whether the content is empty I could perform standard length checks on the element&amp;#39;s value. Instead, I&amp;#39;ve opted to use the &lt;code&gt;NgModelController.$isEmpty&lt;/code&gt; function which performs a few additional checks. I&amp;#39;ll be needing the controller anyway for the reset functionality, so it isn&amp;#39;t being brought in solely for this purpose. The link function&amp;#39;s fourth parameter provides access to the &lt;code&gt;NgModelController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gives us the following updated directive:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(scope, element, attrs, ctrl)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;/* limit to input element... */&lt;/span&gt;

  &lt;span class=&quot;hljs-comment&quot;&gt;/* compiled reset icon template... */&lt;/span&gt;

  element.bind(&lt;span class=&quot;hljs-string&quot;&gt;'input'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    scope.enabled = !ctrl.$isEmpty(element.val());
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the element gains or loses focus, I need to update the icon&amp;#39;s visibility accordingly. I achieve this by binding to the &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; events. Since the focus changes don&amp;#39;t affect the content I need force an update by calling &lt;code&gt;$scope.apply()&lt;/code&gt;. In fact, Angular does just that under the covers when it handles the &lt;code&gt;input&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;With these concerns in mind, the bindings now resemble the following:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;element.bind(&lt;span class=&quot;hljs-string&quot;&gt;'input'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  scope.enabled = !ctrl.$isEmpty(element.val());
})
.bind(&lt;span class=&quot;hljs-string&quot;&gt;'focus'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  scope.enabled = !ctrl.$isEmpty(element.val());
  scope.$apply();
})
.bind(&lt;span class=&quot;hljs-string&quot;&gt;'blur'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  scope.enabled = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
  scope.$apply();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next piece of the puzzle is implementing the &lt;code&gt;reset()&lt;/code&gt; function that gets called whenever the icon is clicked. This is the main part of the code that I changed a few times and wonder if there&amp;#39;s a better way to pull off. The main challenge was that resetting the value directly, via &lt;code&gt;element.val(null)&lt;/code&gt;, wasn&amp;#39;t affecting the model. In other words, the binding wouldn&amp;#39;t kick in. Instead, I needed to use a pair of &lt;code&gt;NgModelController&lt;/code&gt; functions to update the view (and model), then render the changes to the UI. Specifically, the &lt;code&gt;$setViewValue()&lt;/code&gt; function updates the view&amp;#39;s value (and ultimately the model&amp;#39;s value), and the &lt;code&gt;$render()&lt;/code&gt; function is responsible for actually updating the view (i.e., the UI gets updated).&lt;/p&gt;
&lt;p&gt;After the UI update the focus is lost, so I use the &lt;code&gt;$timeout&lt;/code&gt; service to reset it. A piece of advice I received at &lt;a href=&quot;http://ng-conf.org/&quot;&gt;ng-conf 2014&lt;/a&gt; was that I could get away with &lt;code&gt;setTimeout&lt;/code&gt; for better performance since it wouldn&amp;#39;t trigger a digest cycle. In other words, &lt;code&gt;$timeout&lt;/code&gt; is useful if I have other changes that would benefit from triggering a digest and for testability. The good news is that according to the &lt;a href=&quot;http://docs.angularjs.org/api/ng.$timeout&quot;&gt;&lt;code&gt;$timeout&lt;/code&gt; documentation&lt;/a&gt; I can still use it and avoid a digest by passing in &lt;code&gt;false&lt;/code&gt; to the &lt;code&gt;invokeApply&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;With these additions the directive resembles the following:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// add $timeout&lt;/span&gt;
angular.module(&lt;span class=&quot;hljs-string&quot;&gt;'app'&lt;/span&gt;).directive(&lt;span class=&quot;hljs-string&quot;&gt;'resetField'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($compile, $timeout)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ngModel'&lt;/span&gt;,
    scope: {},
    link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(scope, el, attrs, ctrl)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;/* limit to input element... */&lt;/span&gt;

      &lt;span class=&quot;hljs-comment&quot;&gt;/* compiled reset icon template... */&lt;/span&gt;

      scope.reset = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        ctrl.$setViewValue(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);
        ctrl.$render();
        $timeout(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
            el[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].focus();
        }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);
      };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point I&amp;#39;ve covered everything on my list of requirements and the final item is adding animations. I&amp;#39;ve decided to leverage the awesome &lt;a href=&quot;https://daneden.me/animate/&quot;&gt;Animate.css library&lt;/a&gt;. It provides a number of named CSS3 keyframe animations.&lt;/p&gt;
&lt;p&gt;Since the icon uses &lt;code&gt;ng-show&lt;/code&gt;, the Angular animation library allows us to plugin to the animation transitions through the &lt;code&gt;ng-hide-*&lt;/code&gt; classes that are added when the &lt;code&gt;ng-show&lt;/code&gt; value changes. To hook into these I&amp;#39;ll add the &lt;code&gt;fadeOut&lt;/code&gt; animation (from Animate.css) to the &lt;code&gt;ng-hide-add&lt;/code&gt; class, and the &amp;#39;fadeIn&amp;#39; animation for the &lt;code&gt;ng-hide-remove&lt;/code&gt; class. For more details on Angular animations check out &lt;a href=&quot;http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html&quot;&gt;&amp;quot;Remastered Animations in AngularJS 1.2.&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A minor issue I ran into with the CSS was that I had to use &lt;code&gt;display:inline&lt;/code&gt; to get this to appear smoothly, rather than the &lt;code&gt;display:block&lt;/code&gt; suggested by the aforementioned blog post.&lt;/p&gt;
&lt;p&gt;To include Animate.css and ngAnimate:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;//cdnjs.cloudflare.com/ajax/libs/animate.css/2.0/animate.min.css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular-animate.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS needed to work with ngAnimate:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* animations for ngAnimate */&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-attr_selector&quot;&gt;[reset-field]&lt;/span&gt; + &lt;span class=&quot;hljs-class&quot;&gt;.fa&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.ng-hide-add&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt;inline&lt;span class=&quot;hljs-important&quot;&gt;!important&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-webkit-animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;s fadeOut&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-moz-animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;s fadeOut&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-ms-animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;s fadeOut&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;s fadeOut&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-attr_selector&quot;&gt;[reset-field]&lt;/span&gt; + &lt;span class=&quot;hljs-class&quot;&gt;.fa&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.ng-hide-remove&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-webkit-animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;s fadeIn&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-moz-animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;s fadeIn&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-ms-animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;s fadeIn&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;animation&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;s fadeIn&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;hljs-rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, the &lt;code&gt;ngAnimate&lt;/code&gt; module needs to be included:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;angular.module(&lt;span class=&quot;hljs-string&quot;&gt;'app'&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;'ngAnimate'&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these pieces in place the icon now fades in when the input element has text or gains focus (when it&amp;#39;s not empty) and fades out when the element becomes empty (while active) or loses focus.&lt;/p&gt;
&lt;p&gt;The complete directive looks like this:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;angular.module(&lt;span class=&quot;hljs-string&quot;&gt;'am.resetField'&lt;/span&gt;, []).directive(&lt;span class=&quot;hljs-string&quot;&gt;'resetField'&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;'$compile'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'$timeout'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($compile, $timeout)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ngModel'&lt;/span&gt;,
    scope: {},
    link: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(scope, el, attrs, ctrl)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// limit to input element of specific types&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; inputTypes = &lt;span class=&quot;hljs-regexp&quot;&gt;/text|search|tel|url|email|password/i&lt;/span&gt;;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (el[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].nodeName !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;INPUT&quot;&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resetField is limited to input elements&quot;&lt;/span&gt;);
      }
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!inputTypes.test(attrs.type)) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid input type for resetField: &quot;&lt;/span&gt; + attrs.type);
      }

      &lt;span class=&quot;hljs-comment&quot;&gt;// compiled reset icon template&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; template = $compile(&lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;i ng-show=&quot;enabled&quot; ng-mousedown=&quot;reset()&quot; class=&quot;fa fa-times-circle&quot;&amp;gt;&amp;lt;/i&amp;gt;'&lt;/span&gt;)(scope);
      el.after(template);

      scope.reset = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        ctrl.$setViewValue(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);
        ctrl.$render();
        $timeout(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
            el[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].focus();
        }, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);
      };

      el.bind(&lt;span class=&quot;hljs-string&quot;&gt;'input'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        scope.enabled = !ctrl.$isEmpty(el.val());
      })
      .bind(&lt;span class=&quot;hljs-string&quot;&gt;'focus'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        scope.enabled = !ctrl.$isEmpty(el.val());
        scope.$apply();
      })
      .bind(&lt;span class=&quot;hljs-string&quot;&gt;'blur'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        scope.enabled = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
        scope.$apply();
      });
    }
  };
}]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I spoke with Dave Smith at &lt;a href=&quot;http://ng-conf.org/&quot;&gt;ng-conf 2014&lt;/a&gt;. He gave a nice &amp;quot;Deep Dive into Custom Directives&amp;quot; session and kindly accepted to code review my directive to see if I could make improvements. Replacing &lt;code&gt;$timeout&lt;/code&gt; with &lt;code&gt;setTimeout&lt;/code&gt; was one of those suggestions, which I covered earlier. One of the interesting suggestions he made was to turn this into a component instead, which would allow me to get rid of the &lt;code&gt;$compile&lt;/code&gt; step and get rid of the &lt;code&gt;NgModelController&lt;/code&gt; calls made in the &lt;code&gt;reset()&lt;/code&gt;, perhaps by a direct &lt;code&gt;element.val(null)&lt;/code&gt; call instead.&lt;/p&gt;
&lt;p&gt;The feedback was much appreciated and I might try my hand at that next. I suppose that approach might allow me to remove the input type checking as well, since the usage of the component leaves no room for ambiguity, or I can still apply the type via attributes.&lt;/p&gt;
&lt;p&gt;Be sure to check out my &lt;a href=&quot;https://github.com/amageed/angular-resetfield&quot;&gt;GitHub repo&lt;/a&gt; where I have a demo setup of the directive along with a suite of Karma/Jasmine tests.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;ve got any code improvement suggestions, especially around the &lt;code&gt;reset&lt;/code&gt; functionality, your feedback is welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/creating-an-angularjs-reset-field-directive&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/creating-an-angularjs-reset-field-directive&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/creating-an-angularjs-reset-field-directive';
		window.disqus_identifier = 'blog-creating-an-angularjs-reset-field-directive';
		window.disqus_title = 'Creating an AngularJS reset field directive';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Writing AngularJS controllers with CoffeeScript classes</title>
			<link href="http://softwareninjaneer.com/blog/writing-angularjs-controllers-coffeescript-classes"/>
			<updated>2013-09-08T06:23:27.000Z</updated>
			<id>http://softwareninjaneer.com/blog/writing-angularjs-controllers-coffeescript-classes</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Writing AngularJS controllers with CoffeeScript classes | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Writing AngularJS controllers with CoffeeScript classes&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Saturday, September 07, 2013&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;When I started using AngularJS one of the obstacles I ran into was using CoffeeScript classes to develop the controllers. Most examples show an inline JavaScript function, which I can easily duplicate with CoffeeScript. However, to make use of a CoffeeScript class, I had to play around with it till I figured it out.&lt;/p&gt;
&lt;p&gt;In this post I&amp;#39;ll provide a look at converting the simple Todo app on the Angular page to CoffeeScript. I&amp;#39;ll cover the process I went through while figuring this out, which includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A 1:1 JavaScript to CoffeeScript conversion using functions&lt;/li&gt;
&lt;li&gt;Using a CoffeeScript class with all functions defined in the constructor, off of &lt;code&gt;$scope&lt;/code&gt; (don&amp;#39;t do this)&lt;/li&gt;
&lt;li&gt;Defining methods on the class instead of on &lt;code&gt;$scope&lt;/code&gt; and assigning the class to the &lt;code&gt;$scope&lt;/code&gt; (good)&lt;/li&gt;
&lt;li&gt;Using the new Angular 1.1.5+ &lt;code&gt;controller as&lt;/code&gt; syntax and an example of CoffeeScript using a class and base class (good)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;original-todo-app&quot;&gt;Original Todo App&lt;/h3&gt;
&lt;p&gt;To begin with, familiarize yourself with the original Angular Todo app written in JavaScript:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/eJOVofO/1/embed?html,js,output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-conversion-to-coffeescript&quot;&gt;1:1 Conversion to CoffeeScript&lt;/h3&gt;
&lt;p&gt;When using CoffeeScript the output is typically generated within an anonymous function to avoid polluting the global namespace (unless you&amp;#39;re using the &lt;code&gt;bare&lt;/code&gt; compilation option). This poses a challenge when converting the example from JavaScript to CoffeeScript. When doing so, you&amp;#39;ll likely run into this error: &lt;em&gt;Argument &amp;#39;TodoCtrl&amp;#39; is not a function, got undefined&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To address this issue:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a module name for the Angular application: &lt;code&gt;&amp;lt;html ng-app=&amp;quot;todoApp&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the controller to the &lt;em&gt;todoApp&lt;/em&gt; module in the CoffeeScript file:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;angular.module(&lt;span class=&quot;hljs-string&quot;&gt;&quot;todoApp&quot;&lt;/span&gt;, [])
  .controller(&lt;span class=&quot;hljs-string&quot;&gt;&quot;TodoCtrl&quot;&lt;/span&gt;, TodoCtrl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following JS Bin shows the 1:1 conversion result.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/eJOVofO/2/embed?html,js,output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-a-coffeescript-class-with-methods-on-scope&quot;&gt;Using a CoffeeScript class with Methods on $scope&lt;/h3&gt;
&lt;p&gt;Great, we now have CoffeeScript code! To use a CoffeeScript class the first thing to figure out is how to use Angular dependency injection (DI). The answer is to pass everything as constructor parameters, as follows:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; TodoCtrl
    constructor: ($scope) -&amp;gt;
        $scope.todos = [
            text: &lt;span class=&quot;hljs-string&quot;&gt;&quot;learn angular&quot;&lt;/span&gt;
            done: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        ,
            text: &lt;span class=&quot;hljs-string&quot;&gt;&quot;build an angular app&quot;&lt;/span&gt;
            done: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
        ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you do that, you run into another error: &lt;em&gt;Uncaught ReferenceError: $scope is not defined todo.js:23&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It turns out all the methods being defined on &lt;code&gt;$scope&lt;/code&gt; cause that error since &lt;code&gt;$scope&lt;/code&gt; isn&amp;#39;t defined. You could solve this by moving all the function definitions off of &lt;code&gt;$scope&lt;/code&gt; into the constructor.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/eJOVofO/3/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;This approach isn&amp;#39;t recommended. It&amp;#39;s not ideal and isn&amp;#39;t making use of the CoffeeScript class. We&amp;#39;ll fix that next.&lt;/p&gt;
&lt;h3 id=&quot;improved-coffeescript-class-without-relying-on-scope&quot;&gt;Improved CoffeeScript Class Without Relying on $scope&lt;/h3&gt;
&lt;p&gt;To leverage a proper class we need to define the functions on the class instead of on the &lt;code&gt;$scope&lt;/code&gt;. Here are the changes I&amp;#39;ve made to the HTML and CoffeeScript files to facilitate this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assign &lt;code&gt;$scope&lt;/code&gt; to the class in the constructor. This is done by using the &lt;code&gt;@&lt;/code&gt; prefix: &lt;code&gt;constructor: (@$scope) -&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For now I&amp;#39;ve kept the &lt;code&gt;todos&lt;/code&gt; array hanging off of $scope, which means we would need to refer to it via &lt;code&gt;@$scope&lt;/code&gt; in all methods. That&amp;#39;s why step #1 was done.&lt;/li&gt;
&lt;li&gt;Change all &lt;code&gt;$scope&lt;/code&gt; methods to class methods&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As soon as that&amp;#39;s done we run into two issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Issue: archive functionality breaks. To fix it we need to use a fat arrow in the &lt;code&gt;angular.forEach&lt;/code&gt; to maintain the proper scope or rewrite the loop. The former looks like this:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;  archive: -&amp;gt;
      oldTodos = @todos
      @todos = []
      angular.forEach(oldTodos, (todo) =&amp;gt;
          @todos.push(todo) unless todo.done
      )
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue: all methods bound to in HTML are hanging off &lt;code&gt;$scope&lt;/code&gt; so they don&amp;#39;t render to the page. The remaining count is missing and the text appears as &amp;quot;remaining of 2&amp;quot;. The &lt;code&gt;addTodo&lt;/code&gt; method is broken too. We need a way to access the controller methods and this is done by assigning the controller to the &lt;code&gt;$scope&lt;/code&gt; in the constructor and updating the template to access the methods from the controller. Thus, we prefix all methods with &lt;code&gt;ctrl.&lt;/code&gt;, e.g., &lt;code&gt;ctrl.remaining()&lt;/code&gt; (same for &lt;code&gt;archive&lt;/code&gt; and &lt;code&gt;addTodo&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;constructor: (@$scope) -&amp;gt;
# todos here
$scope.ctrl = @
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the full JS Bin sample of this approach:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/eJOVofO/4/embed?html,js,output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;coffeescript-class-base-class-and-controller-as-syntax&quot;&gt;CoffeeScript Class, Base Class, and Controller As Syntax&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;controller as&lt;/em&gt; syntax was introduced in Angular 1.1.5, and it allows us to achieve the same result as assigning the controller to the scope. Rather than doing so in the CoffeeScript file, we can move it to the markup which makes it much more readable.&lt;/p&gt;
&lt;p&gt;In this final example I&amp;#39;ve made the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changed Angular library to 1.1.5+&lt;/li&gt;
&lt;li&gt;Moved &lt;code&gt;todos&lt;/code&gt; array and &lt;code&gt;todoText&lt;/code&gt; to the class and update their template references (no more &lt;code&gt;$scope&lt;/code&gt; reliance, except to log it to the console)&lt;/li&gt;
&lt;li&gt;Used &lt;em&gt;Controller as&lt;/em&gt; syntax and updated template to prefix &lt;code&gt;ctrl.&lt;/code&gt; as needed&lt;/li&gt;
&lt;li&gt;Introduced a &lt;code&gt;BaseCtrl&lt;/code&gt; which the &lt;code&gt;TodoCtrl&lt;/code&gt; will inherit from to make use of the &lt;code&gt;toJson&lt;/code&gt; base method&lt;/li&gt;
&lt;li&gt;Added a &lt;code&gt;textarea&lt;/code&gt; bound to the base &lt;code&gt;toJson&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Applied DI via the &lt;code&gt;$inject&lt;/code&gt; approach to address minification concerns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/eJOVofO/5/embed?html,js,output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;coffeescript-and-ng-min-incompatibility&quot;&gt;CoffeeScript and ng-min Incompatibility&lt;/h3&gt;
&lt;p&gt;Unfortunately if you used to depend on &lt;a href=&quot;https://github.com/btford/ngmin&quot;&gt;ng-min&lt;/a&gt; to convert the inline function DI approach to bracket notation it will no longer work with CoffeeScript classes. To address this you should use the &lt;code&gt;$inject&lt;/code&gt; property instead, which I demonstrated in the final example above.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/writing-angularjs-controllers-coffeescript-classes&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/writing-angularjs-controllers-coffeescript-classes&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/writing-angularjs-controllers-coffeescript-classes';
		window.disqus_identifier = 'blog-writing-angularjs-controllers-coffeescript-classes';
		window.disqus_title = 'Writing AngularJS controllers with CoffeeScript classes';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Evaluating SharpKit - a C# to JavaScript converter</title>
			<link href="http://softwareninjaneer.com/blog/sharpkit-evaluation"/>
			<updated>2013-06-24T04:55:52.000Z</updated>
			<id>http://softwareninjaneer.com/blog/sharpkit-evaluation</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Evaluating SharpKit - a C# to JavaScript converter | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Evaluating SharpKit - a C# to JavaScript converter&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Sunday, June 23, 2013&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;Recently the &lt;a href=&quot;http://sharpkit.net/&quot;&gt;SharpKit C# to JavaScript converter&lt;/a&gt; was mentioned at work and I decided to evaluate it since a few coworkers thought it was interesting. What follows is my impression after using it briefly over the weekend.&lt;/p&gt;
&lt;p&gt;This type of tool isn&amp;#39;t new; before this I was familiar with &lt;a href=&quot;https://github.com/nikhilk/scriptsharp&quot;&gt;Script#&lt;/a&gt;. That said, SharpKit offers a &lt;a href=&quot;http://sharpkit.net/Compare.aspx&quot;&gt;comparison to other tools&lt;/a&gt;. As you can imagine, being a C# to JavaScript converter, you have all the benefits of writing C# code in Visual Studio, which is a fantastic IDE. Add your favorite third-party productivity tool, such as CodeRush or Resharper, and it&amp;#39;s even sweeter.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sharpkit.net/About.aspx&quot;&gt;According to SharpKit&lt;/a&gt;, they aim to address the challenge of JavaScript productivity:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript code turned out to be very hard to maintain, mainly due to the fact that JavaScript’s interpreted nature does not allow IDEs such as Visual Studio to provide high productivity. For instance, Many C# features, such as syntax verification, code completion and refactoring, are simply not available while coding in JavaScript. On top of that, different JavaScript API implementations across web browsers made it even harder to evaluate code correctness during development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The aim of this post is to share the pros and cons of SharpKit as I see them. I will not be sharing much code or discussing the usage of SharpKit itself. To get a better idea of what SharpKit development is like, I recommend watching their &lt;a href=&quot;http://sharpkit.net/Videos.aspx&quot;&gt;videos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think it&amp;#39;s important to state my background and the perspective with which I wrote this evaluation so anyone reading it understands some of my reasoning. I am comfortable with web development, and it shows in my evaluation. I enjoy working directly with JavaScript and the myriad of libraries and tools that come with front-end development. Moreover, I was considering some MV* frameworks for an upcoming project, namely &lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone&lt;/a&gt; and &lt;a href=&quot;http://angularjs.org/&quot;&gt;Angular&lt;/a&gt;, so some of my comments mention them. That said, SharpKit is probably somebody&amp;#39;s baby and I respect that they offer a solution to address a particular group of developers. I just don&amp;#39;t count myself amongst them, and that&amp;#39;s OK.&lt;/p&gt;
&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Good for C# devs who aren&amp;#39;t too familiar or comfortable with JavaScript&lt;/li&gt;
&lt;li&gt;Compile-time checking (everything is typed - could be a con, see below)&lt;/li&gt;
&lt;li&gt;Visual Studio Intellisense, third-party plugins, and debugging will all work with the C# code&lt;/li&gt;
&lt;li&gt;Support for LINQ / Reflection / Generics (comes at a cost though, see cons below)&lt;/li&gt;
&lt;li&gt;Support for most common libraries, like jQuery, jQueryUI&lt;/li&gt;
&lt;li&gt;Allows you to create header files to support libraries they don&amp;#39;t support, so it&amp;#39;s extensible&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cons-and-some-general-observations-&quot;&gt;Cons (and some general observations)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LINQ support comes at a cost. From the &lt;a href=&quot;http://sharpkit.net/Faq.aspx&quot;&gt;FAQ&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Advanced support for features such as reflection, LINQ and generics require a small include of the SharpKit JavaScript Kernel (about 60K compressed).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#39;m not sure if they mean minified + gzipped by &amp;quot;compressed&amp;quot; or just minified. I minified + gzipped it and it came down to 25K, so it&amp;#39;s not clear where that 60K comes from. While it&amp;#39;s nice to have, it might not be needed if you&amp;#39;re targeting modern browsers that support the common map/foreach functionality natively. For other LINQ type scenarios I would consider &lt;a href=&quot;http://lodash.com/&quot;&gt;Lo-Dash&lt;/a&gt;, which has a smaller footprint (which can be enhanced by creating custom builds with your desired functionality). Alternately, there&amp;#39;s &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt; and it weighs in at 14kb minified (4kb gzipped). If there&amp;#39;s a real need for a faithful mirror of .NET LINQ, the &lt;a href=&quot;http://linqjs.codeplex.com/&quot;&gt;LinqJS project&lt;/a&gt; weighs in at 6kb gzipped.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compile-time checking introduces additional casting to satisfy the static nature of C#. Example: after grabbing an element by ID, I need to cast it to the HTML element type (an input field, in this case) to access it&amp;#39;s relevant properties...&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; input = document.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input&quot;&lt;/span&gt;)
                      .As&amp;lt;SharpKit.Html.HtmlInputElement&amp;gt;();
  input.&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyValue&quot;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the input element changes to a &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;textarea&lt;/code&gt;, I now have to change this code to cast it appropriately, although they both might be accessed by the same &lt;code&gt;value&lt;/code&gt; property. In &lt;a href=&quot;http://angularjs.org/&quot;&gt;Angular&lt;/a&gt; this is also a non-issue since the desired property would be bound to the model for us to access directly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have to rely on a third party to update libraries (e.g., adopting a new jQuery/jQuery-UI/etc. release) or offer a particular library to begin with (Angular, Backbone).&lt;ul&gt;
&lt;li&gt;Lacks support for Angular and Backbone. I suspect Angular support won&amp;#39;t make it anytime soon, if at all, due to how different of a framework it is and how the dependency injection is determined. If it were supported, the amount of nested callbacks and delegates would look nothing like today&amp;#39;s JavaScript that&amp;#39;s contained in one spot and easier to read.&lt;/li&gt;
&lt;li&gt;I can&amp;#39;t use the JavaScript components of the Bootstrap CSS framework (or Zurb Foundation) since no SharpKit library exists for them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;To work around the lack of support for any library, there are 2 solutions:&lt;ol&gt;
&lt;li&gt;Write our own SharpKit header files for the libraries. This means reading the JavaScript source code and determining which of the classes and members are required, creating an empty implementation, then decorating them with a &lt;code&gt;JsTypeAttribute&lt;/code&gt; in the proper mode, and preventing the classes from being exported. This might be a pro, since I can support libraries, but it&amp;#39;s extra work whenever I need something.&lt;/li&gt;
&lt;li&gt;A hybrid approach using SharpKit + JavaScript. For example, I&amp;#39;d write JavaScript directly, leveraging Bootstrap JavaScript functionality normally (since there&amp;#39;s no SharpKit equivalent), then bring in any SharpKit generated JavaScript as modules (i.e., using RequireJS or CommonJS). So I&amp;#39;m back to writing JavaScript anyway and now I&amp;#39;m maintaining an awkward hybrid approach.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Devs that are comfortable with JavaScript are penalized and can&amp;#39;t leverage their knowledge or much of the power of dynamic languages since they would have to play by the static world&amp;#39;s rules (example below).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lose out on the dynamic nature of JavaScript (depending on who you are, that might be a pro). To me this is a loss since a very common JavaScript pattern is to access an object&amp;#39;s property via key lookup using strings and usually a concatenated string, making it somewhat comparable to generics in C#.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaScript:&lt;/strong&gt; &lt;code&gt;console.log(person[&amp;quot;Name&amp;quot;]);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SharpKit (w/reflection):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; person.GetType().GetProperties())
{
    console.log(prop.GetValue(person, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that will likely generate some interesting looking code and require that 60kb library. I couldn&amp;#39;t get this to compile, although they seem to support it. An &lt;code&gt;ExpandoObject&lt;/code&gt; might do the trick, but that didn&amp;#39;t compile for me either. I&amp;#39;m probably missing some setting to access .NET classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduces dev / build workflow challenges. I can&amp;#39;t edit a .cs file in Visual Studio while debugging to update the generated JavaScript. We&amp;#39;d need to stop debugging, edit, start debugging / launch the site. That&amp;#39;s a step back in productivity. With a JavaScript approach (including CoffeeScript and TypeScript) tools exist to compile changes on the fly, so the workflow is much nicer: edit JS/CS/TS file, a tool watches for changes and compiles them on the fly, a tool also reloads your browser automatically. There&amp;#39;s no stop/edit/start since VS isn&amp;#39;t in the way; it&amp;#39;s just edit/save and the tools take care of the rest.&lt;/li&gt;
&lt;li&gt;No support for Jasmine or Angular&amp;#39;s additions (meaning I would have to test in JavaScript, which was the original plan anyway). SharpKit supports QUnit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other-issues&quot;&gt;Other issues&lt;/h3&gt;
&lt;p&gt;This library should work in Visual Studio 2012, and forums online support that it&amp;#39;s just a library to be reference. However, I installed it and the project template only showed up for VS 2010, not VS 2012. I had to ignore the project template and manually import the SharpKit reference since there was no MVC template. Given an existing project, you would want to import the reference by adding it to the .csproj file. I got it to work with VS 2010.&lt;/p&gt;
&lt;p&gt;In VS 2012 I manually imported the references. All looked well, but upon compiling and launching the site, the JavaScript file wasn&amp;#39;t generated. The same exact setup worked in VS 2010 though. Might be a fluke... uninstalled/reinstalled without a difference in the end result though.&lt;/p&gt;
&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h3&gt;
&lt;p&gt;I can see the allure of a tool like SharpKit for devs that would prefer this type of environment who want to be productive with C# and aren&amp;#39;t concerned with a couple of things, such as client-side script size / performance, and the stop and go workflow impediment since that&amp;#39;s how they typically work with C# / ASP.NET MVC anyway. Given the cons mentioned, I feel it&amp;#39;s more suited for projects relying on the supported libraries, and by people that might not have a need to use the libraries I&amp;#39;m interested in - people that aren&amp;#39;t accustomed to front-end dev. It&amp;#39;s also additional work to produce and update custom header files.&lt;/p&gt;
&lt;p&gt;I would rather embrace a real front-end workflow that keeps me in sync with the front-end community today, and embrace the dynamic nature of JavaScript. CoffeeScript and TypeScript are transpilers that still retain dynamic support and don&amp;#39;t take that away. SharpKit is more of a library that abstracts that nature away to provide a wrapper with its own classes and work within C#&amp;#39;s static nature.&lt;/p&gt;
&lt;p&gt;This reminds me of Web Forms all over again. What I enjoy about ASP.NET MVC is that it allows me to get closer to the metal, avoid abstractions, and enhance my front-end skills. That would all go away by adopting SharpKit&amp;#39;s approach and feels like a step backwards. It would also single-handedly eliminate the entire front-end stack I have in mind and I don&amp;#39;t think a tool should wield so much power over technical decisions and dictate what I can and cannot use.&lt;/p&gt;
&lt;p&gt;I only spent a weekend evaluating this library, so I&amp;#39;m sure I missed some features or might have made a mistaken assumption along the way. Overall, I think I got the gist of working with it and it&amp;#39;s not for me. I&amp;#39;m comfortable developing and debugging JavaScript. I mainly use Sublime Text as my IDE for front-end development, and I can setup a JS linter if I&amp;#39;m concerned with catching JS gotchas. If I wanted to work with a more static aware flavor of JavaScript, I would consider &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/sharpkit-evaluation&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/sharpkit-evaluation&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/sharpkit-evaluation';
		window.disqus_identifier = 'blog-sharpkit-evaluation';
		window.disqus_title = 'Evaluating SharpKit - a C# to JavaScript converter';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>The C# null coalescing operator and when 2 + 3 = 2</title>
			<link href="http://softwareninjaneer.com/blog/null-coalescing-operator-precedence"/>
			<updated>2012-08-02T11:50:16.000Z</updated>
			<id>http://softwareninjaneer.com/blog/null-coalescing-operator-precedence</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;The C# null coalescing operator and when 2 + 3 = 2 | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;The C# null coalescing operator and when 2 + 3 = 2&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Thursday, August 02, 2012&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;Recently I was working with some nullable objects that I needed to add together. This led to some incorrect results when I wrote the code to sum them up due to the use of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms173224.aspx&quot;&gt;null coalescing operator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The good news is that I wrote the code in a particular way, on purpose, to see what the compiler would do and my intuition proved to be correct. On top of that, I had some unit tests in place, so I was confident that a wrong result would get caught immediately. While I don&amp;#39;t think this is an earth-shattering finding, a quick search shows that the issue has tripped up a few people.&lt;/p&gt;
&lt;p&gt;Quick, what&amp;#39;s 2 + 3? Would you expect the answer to be 2? If not, then read on! Here is some code to put this all in perspective.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;? x = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;? y = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; result = x ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; + y ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
Console.WriteLine(result);  &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So why did I end up with a result of two? Clearly 2 + 3 = 5, not 2! The answer is that the precedence rules for the &lt;em&gt;?? operator&lt;/em&gt; played a role in returning the odd result.&lt;/p&gt;
&lt;p&gt;After reviewing the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6a71f45d.aspx&quot;&gt;C# operators precedence rules&lt;/a&gt;, I found that the &lt;em&gt;?? operator&lt;/em&gt; has a very low precedence. The addition operator has higher precedence than it, which essentially causes the entire expression to be evaluated as follows:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// parenthesize based on higher precedence of addition&lt;/span&gt;
x ?? (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; + y) ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
x ?? (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// y is 3&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// the left-hand operand, x, isn't null&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// so use its value and ignore the right-hand operand&lt;/span&gt;
(x ?? &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;

x ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// once again, ignore the right-hand operand&lt;/span&gt;
&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;hljs-comment&quot;&gt;// result is x, which is 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bear in mind that these steps may not be exactly how the C# compiler evaluates the expression, but they&amp;#39;re close enough to illustrate how it arrives to the seemingly incorrect result. Eric Lippert&amp;#39;s post titled, &amp;quot;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2008/05/23/precedence-vs-associativity-vs-order.aspx&quot;&gt;Precedence vs Associativity vs Order&lt;/a&gt;,&amp;quot; sheds some light on how the compiler evaluates expressions if you&amp;#39;re looking for more detail.&lt;/p&gt;
&lt;p&gt;As you may have guessed, the solution to return the expected result is to group the operator in parentheses so that the intended precedence is maintained. The following code yields the correct result of five:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;? x = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;? y = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; result = (x ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) + (y ?? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
Console.WriteLine(result);  &lt;span class=&quot;hljs-comment&quot;&gt;// 5, as intended&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternate approach, applicable with nullable types, is to use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/72cec0e0.aspx&quot;&gt;&lt;code&gt;Nullable.GetValueOrDefault&lt;/code&gt; method&lt;/a&gt;. However, it doesn&amp;#39;t have the brevity of the &lt;em&gt;?? operator&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; result = x.GetValueOrDefault() + y.GetValueOrDefault();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most people have an idea of general precedence rules, but as software developers we run into more operators with different levels of precedence. For clarity, and when you&amp;#39;re in doubt, group your expressions in parentheses.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/null-coalescing-operator-precedence&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/null-coalescing-operator-precedence&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/null-coalescing-operator-precedence';
		window.disqus_identifier = 'blog-null-coalescing-operator-precedence';
		window.disqus_title = 'The C# null coalescing operator and when 2 + 3 = 2';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Returning classes that inherit List&lt;T&gt; using a generic method</title>
			<link href="http://softwareninjaneer.com/blog/returning-classes-that-inherit-listt-using-a-generic-method"/>
			<updated>2012-03-05T14:35:10.000Z</updated>
			<id>http://softwareninjaneer.com/blog/returning-classes-that-inherit-listt-using-a-generic-method</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Returning classes that inherit List&amp;lt;T&amp;gt; using a generic method | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Returning classes that inherit List&amp;lt;T&amp;gt; using a generic method&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Monday, March 05, 2012&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;Recently a past coworker came across a problem and issued a code challenge to some of her colleagues to help figure it out. This post is my response to that challenge.&lt;/p&gt;
&lt;h3 id=&quot;problem-and-challenge&quot;&gt;Problem and Challenge&lt;/h3&gt;
&lt;p&gt;In an effort to enhance the readability of a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, especially when nested within another list, the developer decided to implement a new class that inherits from &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;. This looks like:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; ProductList : List&amp;lt;Product&amp;gt; { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;She wanted to have an extension method that would operate on the &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; but return the actual type that inherited from it (&lt;code&gt;ProductList&lt;/code&gt;, in this example).&lt;/p&gt;
&lt;p&gt;To illustrate, consider an extension method that simply skips the first item in a list and returns the remaining items (exciting, I know). This sample reflects the approach taken:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Extensions
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;T&amp;gt; SkipFirst&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; List&amp;lt;T&amp;gt; input)
    {
        List&amp;lt;T&amp;gt; result = input.Skip(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).ToList();
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The extension method was used in the following manner:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;ProductList result = (ProductList)list.SkipFirst();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This caused an &lt;code&gt;InvalidCastException&lt;/code&gt; to be thrown:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unable to cast object of type &amp;#39;System.Collections.Generic.List`1[CollectionInheritance.Product]&amp;#39; to type &amp;#39;CollectionInheritance.ProductList&amp;#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point she could&amp;#39;ve fallen back on using &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; but she worked around it using AutoMapper instead. The problem with that approach is that the original intention to provide an elegant solution to be used with other classes following the same inheritance setup was somewhat lost. It now required two steps: (1) calling &lt;code&gt;SkipFirst&lt;/code&gt;, and (2) mapping from &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;code&gt;TList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dissatisfied, she issued the code challenge seeking an extension method that would work with classes which inherit from &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; without using AutoMapper.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/ChallengeAcceptedGenericsInheritance.jpg&quot; alt=&quot;Generics and Inheritance? Challenge Accepted!&quot;&gt;
&lt;/p&gt;

&lt;h3 id=&quot;understanding-why-casting-fails&quot;&gt;Understanding why casting fails&lt;/h3&gt;
&lt;p&gt;Before I get to my solution I wanted to shed some light on why casting doesn&amp;#39;t work. As seen earlier, an explicit cast threw an &lt;code&gt;InvalidCastException&lt;/code&gt;. Similarly, usage of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cscsdfbt.aspx&quot;&gt;&lt;code&gt;as&lt;/code&gt; operator&lt;/a&gt; is incorrect and would return a &lt;em&gt;null&lt;/em&gt; result.&lt;/p&gt;
&lt;p&gt;The reason both approaches fail is because &lt;code&gt;ProductList&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; are different types! Yes, they represent the same thing to us on the outside, but they aren&amp;#39;t the same.&lt;/p&gt;
&lt;p&gt;Jeffrey Richter touches upon this very topic in his excellent &lt;a href=&quot;http://www.amazon.com/gp/product/0735627045/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=softwaninjan-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0735627045&quot;&gt;CLR via C#&lt;/a&gt; book (p. 287, 3rd ed.):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... you should never define a new class explicitly for the purpose of making your source code easier to read. The reason is because you lose type identity and equivalence...&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He continues with an example to demonstrate, similar to what follows, which evaluates to &lt;em&gt;false&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; sameType = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(List&amp;lt;Product&amp;gt;) == &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(ProductList); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that in mind, it&amp;#39;s clear why casting won&amp;#39;t work. Likewise, the &lt;code&gt;as&lt;/code&gt; operator returns a null value since, by definition, if the conversion fails it will return null instead of throwing an exception.&lt;/p&gt;
&lt;p&gt;Another important point (also raised in the book) is that this approach prevents &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; from being passed to a method that expects the new class which inherits from &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; as a parameter. However, going in the opposite direction is allowed. In other words, passing a &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; to a method that accepts a &lt;code&gt;ProductList&lt;/code&gt; would fail, but passing a &lt;code&gt;ProductList&lt;/code&gt; to a method expecting &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; is valid since &lt;code&gt;ProductList&lt;/code&gt; inherits from &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;To meet the challenge I wrote the following extension method:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; TCollection SkipFirst&amp;lt;T, TCollection&amp;gt;
    (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; ICollection&amp;lt;T&amp;gt; input)
        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; TCollection : ICollection&amp;lt;T&amp;gt;, &lt;span class=&quot;hljs-title&quot;&gt;new&lt;/span&gt;()
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; processedItems = input.Skip(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);

    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TCollection();
    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (T item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; processedItems)
    {
        result.Add(item);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;ProductList result = list.SkipFirst&amp;lt;Product, ProductList&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you go! Nice and succinct. No casting, and no need for the extra line of code to use AutoMapper. The key to this puzzle was to return &lt;code&gt;TCollection&lt;/code&gt;, instead of a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;. Furthermore, adding the generic constraints ensures that &lt;code&gt;TCollection&lt;/code&gt; implements &lt;code&gt;ICollection&amp;lt;T&amp;gt;&lt;/code&gt; and has a public parameterless constructor in order to new up an instance of the class.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; could&amp;#39;ve been used in the extension method.&lt;/p&gt;
&lt;h3 id=&quot;implementing-custom-collections-and-public-apis&quot;&gt;Implementing custom collections and public APIs&lt;/h3&gt;
&lt;p&gt;For simplicity&amp;#39;s sake it&amp;#39;s not uncommon to see a subclass of &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;. Perhaps this is acceptable for internal usage, however it isn&amp;#39;t recommended when exposed in a &lt;em&gt;public API&lt;/em&gt;. This issue has been &lt;a href=&quot;http://stackoverflow.com/q/5376203/59111&quot;&gt;brought up&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/q/3748931/59111&quot;&gt;numerous&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/q/21715/59111&quot;&gt;times&lt;/a&gt;. If a custom collection needs to have special behavior then it&amp;#39;s possible to change the collection&amp;#39;s implementation if inheriting from classes meant to be extended.&lt;/p&gt;
&lt;p&gt;To paraphrase &lt;a href=&quot;blogs.msdn.com/b/kcwalina/archive/2005/09/26/474010.aspx&quot;&gt;Krzysztof Cwalina&lt;/a&gt;, co-author of the .NET &lt;a href=&quot;http://www.amazon.com/gp/product/0321545613/ref=as_li_tf_tl?ie=UTF8&amp;amp;tag=softwaninjan-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321545613&quot;&gt;Framework Design Guidelines&lt;/a&gt;, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; wasn&amp;#39;t meant to be extended, unlike &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; which lets you override its members and supports awareness of item modification. Also, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; returns a rich set of members that typically aren&amp;#39;t appropriate for all scenarios.&lt;/p&gt;
&lt;p&gt;This guideline is also covered by a Code Analysis warning, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182142.aspx&quot;&gt;CA1002: Do not expose generic lists&lt;/a&gt;. David Kean, a member of the Code Analysis team, expanded on this warning with supporting code examples in the post titled &lt;a href=&quot;http://blogs.msdn.com/b/codeanalysis/archive/2006/04/27/faq-why-does-donotexposegenericlists-recommend-that-i-expose-collection-lt-t-gt-instead-of-list-lt-t-gt-david-kean.aspx&quot;&gt;FAQ: Why does DoNotExposeGenericLists recommend that I expose Collection&lt;T&gt; instead of List&lt;T&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/returning-classes-that-inherit-listt-using-a-generic-method&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/returning-classes-that-inherit-listt-using-a-generic-method&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/returning-classes-that-inherit-listt-using-a-generic-method';
		window.disqus_identifier = 'blog-returning-classes-that-inherit-listt-using-a-generic-method';
		window.disqus_title = 'Returning classes that inherit List&lt;T&gt; using a generic method';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Designating different audio devices for playback and communication on Windows 7</title>
			<link href="http://softwareninjaneer.com/blog/designating-different-audio-devices-for-playback-and-communication-on-windows-7"/>
			<updated>2012-02-25T21:57:57.000Z</updated>
			<id>http://softwareninjaneer.com/blog/designating-different-audio-devices-for-playback-and-communication-on-windows-7</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Designating different audio devices for playback and communication on Windows 7 | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Designating different audio devices for playback and communication on Windows 7&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Saturday, February 25, 2012&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;My desktop is hooked up to external speakers, which all audio is emitted from. However, if I want to jump on a Skype call (or similar), all sound is routed to the USB headset as soon as I plug it in. This is great for the duration of the call, but since I have Pandora running almost constantly, or might want to watch (and hear) a video, I don&amp;#39;t want to wear the headset all day. Plus, if I kept it plugged in I might miss all audio cues from Outlook, Skype notifications, and so on. True, most programs have visual cues too, but I might not be looking at that portion of the screen, or at the monitor the application lives on in the case of dual monitors.&lt;/p&gt;
&lt;p&gt;I also didn&amp;#39;t want to keep plugging and unplugging the USB, which meant I had to use an accessible USB slot instead of one behind the desktop - let&amp;#39;s face it, who wants to see a distracting bunch of cable near them?&lt;/p&gt;
&lt;p&gt;Determined to find a solution to a seemingly simple need, I played around with the sound settings. Originally I thought there might be a way to specify the audio device on a per application basis. Instead, I was happy to find a user-friendly option that&amp;#39;s built right into Windows 7 (maybe Vista too, not sure, but you&amp;#39;re not really using that are you?). Essentially, Windows 7 allows us to specify a &lt;em&gt;default device&lt;/em&gt; and a &lt;em&gt;default communications device&lt;/em&gt;. Without further ado, here&amp;#39;s how I set it up!&lt;/p&gt;
&lt;h3 id=&quot;setting-up-playback-devices&quot;&gt;Setting up playback devices&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Right-click the volume control, and select &lt;em&gt;&amp;quot;Playback devices&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/audio-setup/VolumeMenu.png&quot; alt=&quot;Volume Menu to select Playback devices&quot;&gt;
&lt;/p&gt;

&lt;p&gt;This will bring up the Sound control panel, which will look similar to the following image. On the &lt;em&gt;Playback&lt;/em&gt; tab notice that the USB headset is currently set as the default device. Your setup might be different, which is fine since the next couple of steps are the important ones.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/audio-setup/SoundDialog.png&quot; alt=&quot;Sound dialog with USB headset plugged in&quot;&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; set your desired speakers as the default device. A green check-mark icon will appear next to it.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/audio-setup/SoundDialogSetDefault.png&quot; alt=&quot;Set default device&quot;&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; set the USB headset as the default communication device.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/audio-setup/SoundDialogSetCommunication.png&quot; alt=&quot;Set the default communication device&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Upon doing so a green phone icon will appear next to it. The final setup should resemble the image below.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/audio-setup/SoundDialogResult.png&quot; alt=&quot;Different playback devices set to default and communications&quot;&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it! With the above setup I can now leave my USB headset plugged in, and only use it when speaking to someone on Skype or attending an online presentation. In the meantime all my audio is coming from my external speakers.&lt;/p&gt;
&lt;h3 id=&quot;controlling-other-sounds-when-placing-a-call&quot;&gt;Controlling other sounds when placing a call&lt;/h3&gt;
&lt;p&gt;Windows 7 provides a neat feature that adjusts the sound from other devices when using the communications device. The feature is known as &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/dd316773%28v=vs.85%29.aspx&quot;&gt;ducking, or stream attenuation&lt;/a&gt;. By default, I found that the volume was lowered by 80% when I initiated a Skype call. It&amp;#39;s a reasonable default, but I prefer to completely mute all other sounds. To do so, bring up the Sound control panel again, select the &lt;em&gt;Communications&lt;/em&gt; tab, then choose your desired option.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/audio-setup/SoundDialogCommunicationsDucking.png&quot; alt=&quot;Ducking (stream attenuation) options&quot;&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/designating-different-audio-devices-for-playback-and-communication-on-windows-7&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/designating-different-audio-devices-for-playback-and-communication-on-windows-7&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/designating-different-audio-devices-for-playback-and-communication-on-windows-7';
		window.disqus_identifier = 'blog-designating-different-audio-devices-for-playback-and-communication-on-windows-7';
		window.disqus_title = 'Designating different audio devices for playback and communication on Windows 7';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Productivity tip: delimiting multiple lines with your IDE</title>
			<link href="http://softwareninjaneer.com/blog/productivity-tip-delimiting-multiple-lines-with-your-ide"/>
			<updated>2012-01-11T17:47:36.000Z</updated>
			<id>http://softwareninjaneer.com/blog/productivity-tip-delimiting-multiple-lines-with-your-ide</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Productivity tip: delimiting multiple lines with your IDE | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Productivity tip: delimiting multiple lines with your IDE&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Wednesday, January 11, 2012&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;During development I&amp;#39;ve had the need to delimit a number of lines with a character. Sometimes these lines are numerous and the task is mind-numbingly tedious if I have to sit there and do it manually.&lt;/p&gt;
&lt;p&gt;Imagine you&amp;#39;re working with SQL and have a list of ProductId values on separate lines in your clipboard:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;123&lt;/p&gt;
&lt;p&gt;1234&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You want to include these values when using the IN keyword:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Products
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; ProductId &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (...)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The goal is to place commas before the numbers, or after the numbers, as shown below.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- commas before&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Products
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; ProductId &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;
,&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;
,&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- commas after&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Products
&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; ProductId &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,
&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,
&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the order most people take:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Paste numbers between the parentheses&lt;/li&gt;
&lt;li&gt;Position cursor at the start (or end) of the line with the arrow keys (bad) or &lt;kbd&gt;Home&lt;/kbd&gt; / &lt;kbd&gt;End&lt;/kbd&gt; key (better)&lt;/li&gt;
&lt;li&gt;Insert comma&lt;/li&gt;
&lt;li&gt;Move to the next line&lt;/li&gt;
&lt;li&gt;Repeat N - 1 times&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;#39;s got to be a better way to do this right? Right!&lt;/p&gt;
&lt;p&gt;The two techniques I&amp;#39;ll cover in this post are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Column mode selection&lt;/li&gt;
&lt;li&gt;Find/Replace using regular expressions&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;column-mode-selection&quot;&gt;Column mode selection&lt;/h3&gt;
&lt;p&gt;The typical selection mode is known as &lt;em&gt;continuous stream selection&lt;/em&gt;, which is the default selection via the mouse or is performed by using the &lt;kbd&gt;Shift&lt;/kbd&gt; &lt;strong&gt;+ arrow&lt;/strong&gt; keys. The other mode is &lt;strong&gt;column mode&lt;/strong&gt;, or &lt;strong&gt;box mode&lt;/strong&gt;. It lets you select text in columns with a rectangular portion for vertical editing. Once the columns are selected you have the option of inserting, deleting, copying, or pasting text. It&amp;#39;s also possible to overwrite text (i.e., overstrike) by hitting the Insert key and typing new text.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/StreamAndColumnSelectionModes.png&quot; alt=&quot;Stream and Column selection modes&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Some IDEs and text-editors support column mode, such as Visual Studio 2010 and Notepad++. In fact, prior versions of Visual Studio supported it, but they didn&amp;#39;t support text insertion, pasting, or zero-length boxes, which are &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd465268.aspx&quot;&gt;new features introduced in VS 2010&lt;/a&gt;. Thus, it was only good for copying and deleting text. Microsoft SQL Server Management Studio (SSMS, using SQL Server 2008) seems to have the limited pre-VS 2010 support for this, which was the inspiration behind this post&amp;#39;s second technique.&lt;/p&gt;
&lt;h4 id=&quot;keyboard-approach-&quot;&gt;Keyboard approach:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Place the cursor at the beginning of the line.&lt;/li&gt;
&lt;li&gt;Press and hold the &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;Alt&lt;/kbd&gt; keys, then move the cursor with any &lt;strong&gt;arrow key&lt;/strong&gt;. You will see the cursor flashing on each line you&amp;#39;ve selected.&lt;/li&gt;
&lt;li&gt;Type the desired character or text to prefix or delimit the lines with. For this example it&amp;#39;s a comma: &lt;code&gt;,&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;mouse-approach-&quot;&gt;Mouse approach:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Place the cursor at the beginning of the line.&lt;/li&gt;
&lt;li&gt;Press and hold the &lt;kbd&gt;Alt&lt;/kbd&gt; key, then click the left mouse button and move the cursor over the desired text.&lt;/li&gt;
&lt;li&gt;Modify text as desired.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To clarify, for the purposes of this example the cursor is placed at the beginning of the line. However, column mode can be used anywhere in the text, even in the middle of a word.&lt;/p&gt;
&lt;p&gt;With regards to the SQL statement earlier, delimiting at the beginning of the lines is probably the best option when using this feature since the text is lined up properly. The end of your lines usually won&amp;#39;t line up since they might have different lengths. The following screenshot demonstrates selecting the columns and the result after adding commas.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/ColumnSelection.png&quot; alt=&quot;Column selection and result of inserting commas&quot;&gt;
&lt;/p&gt;

&lt;p&gt;There are a number of places where this technique could be useful. In the earlier screenshot showing the stream and column modes, the Hungarian notation could be eliminated easily. Just select the column of &amp;quot;i&amp;quot; characters and hit Backspace. Voila! Consider another scenario where you want to add or change the access modifier for a bunch of properties on a class, making them all &lt;code&gt;public&lt;/code&gt;... column mode to the rescue!&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/ColumnSelectionPersonClass.png&quot; alt=&quot;Column selection to add access modifiers to class properties&quot;&gt;
&lt;/p&gt;

&lt;p&gt;For additional information refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notepad++ - &lt;a href=&quot;http://npp-community.tuxfamily.org/documentation/notepad-user-manual/editing/column-mode-editing&quot;&gt;Column edit mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio 2010 - &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/729s2dhh.aspx&quot;&gt;How to: Select and Change Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;find-replace-using-regular-expressions&quot;&gt;Find/Replace using regular expressions&lt;/h3&gt;
&lt;p&gt;In case your IDE of choice doesn&amp;#39;t support column selection, you can still pull this off if you&amp;#39;re not averse to learning a tiny amount of regex. When I say &amp;quot;tiny&amp;quot; I really mean it. All it takes is one regex metacharacter, and you have two to choose from depending on where you want to place the delimiter.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;a href=&quot;http://cheezburger.com/View/5656160768&quot;&gt;&lt;img src=&quot;http://images.cheezburger.com/completestore/2012/1/5/62311133-3d91-4df8-aedb-566c75a9ef22.jpg&quot; alt=&quot;Regex?  oh noes!!!&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;To solve this task use the IDE&amp;#39;s Find/Replace dialog and select the regex option. The two metacharacters of interest are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt;: the caret character matches the position at the beginning of the line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$&lt;/strong&gt;: the dollar sign matches the position at the end of the line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are known as &lt;a href=&quot;http://www.regular-expressions.info/anchors.html&quot;&gt;anchors&lt;/a&gt; since they match at specific positions.&lt;/p&gt;
&lt;p&gt;To place the commas before the numbers, use the caret. Otherwise, use the dollar sign to place them after the numbers. The replacement character will be a comma, and you should select the lines to delimit then restrict the replacement to the active selection.&lt;/p&gt;
&lt;p&gt;The following screenshots show the find/replace dialog setup in Microsoft Visual Studio 2010 before the replacement, and the result after the replacement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/IdeRegexDelimitLineStart.png&quot; alt=&quot;Delimiting the beginning of lines via regex&quot;&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/IdeRegexDelimitLineStartResult.png&quot; alt=&quot;Result of delimiting the beginning of lines via regex&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Similarly, it&amp;#39;s possible to place the commas at the end of the lines using the dollar sign metacharacter. The following screenshots demonstrate this approach in Notepad++.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/IdeRegexDelimitLineEnd.png&quot; alt=&quot;Delimiting the end of lines via regex&quot;&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/IdeRegexDelimitLineEndResult.png&quot; alt=&quot;Result of delimiting end lines&quot;&gt;
&lt;/p&gt;

&lt;p&gt;Beware that while most IDEs and text-editors support regex, some only support a subset of metacharacters or may use different metacharacters completely. The good news is the two metacharacters I&amp;#39;ve introduced are standard amongst most regex flavors, which should make this tip universally applicable. I&amp;#39;ve used this tip in Microsoft Visual Studio, Notepad++, LINQPad, and SSMS.&lt;/p&gt;
&lt;p&gt;Note, however, that SSMS exhibits an odd behavior (bug?) when using the caret to delimit at the beginning of the line. It skips the first selected line, resulting in 2 occurrences being replaced instead of the expected 3, per my example. This isn&amp;#39;t such a big deal, since at that point all you need to do is manually do the work on one line. Alternately, to get around this, I include the line before the target line to delimit in my selection. That means including the line that starts with &amp;quot;WHERE&amp;quot; so the replacement skips that line and correctly delimits the remaining lines. That said, SSMS works fine when using the end of line delimiting approach with the dollar sign.&lt;/p&gt;
&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h3&gt;
&lt;p&gt;Obviously column mode is much simpler than using find/replace and regex. If you have that option, use it. Nonetheless, regex is extremely useful for other scenarios where you want to locate a string or series of characters in a certain pattern, then not only add a prefix or suffix to it, but re-use portions of the original input in the replacement. To do so, knowledge of regex comes in handy and can let you pull off such complex text manipulation tasks. Perhaps that&amp;#39;s a post for another day!&lt;/p&gt;
&lt;p&gt;For the purposes of this post, however, I&amp;#39;ve only covered delimiting at the start and end of a string and detailed a comparable one to one solution for the column mode and regex approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/productivity-tip-delimiting-multiple-lines-with-your-ide&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/productivity-tip-delimiting-multiple-lines-with-your-ide&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/productivity-tip-delimiting-multiple-lines-with-your-ide';
		window.disqus_identifier = 'blog-productivity-tip-delimiting-multiple-lines-with-your-ide';
		window.disqus_title = 'Productivity tip: delimiting multiple lines with your IDE';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Enumerating weakly typed collections with implicitly typed variables</title>
			<link href="http://softwareninjaneer.com/blog/enumerating-weakly-typed-collections-with-implicitly-typed-variables"/>
			<updated>2011-11-27T18:28:23.000Z</updated>
			<id>http://softwareninjaneer.com/blog/enumerating-weakly-typed-collections-with-implicitly-typed-variables</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Enumerating weakly typed collections with implicitly typed variables | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Enumerating weakly typed collections with implicitly typed variables&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Sunday, November 27, 2011&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;The advent of C# 3.0 introduced the ability to use implicitly typed local variables via the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb383973.aspx&quot;&gt;&lt;code&gt;var&lt;/code&gt; keyword&lt;/a&gt;. Usage of &lt;code&gt;var&lt;/code&gt; has flourished since then, and while some people use it judiciously, others make liberal use of it. Ultimately, most people are bound to run into a scenario where it surprisingly ceases to behave properly. Suddenly using &lt;code&gt;var&lt;/code&gt; in a foreach loop causes IntelliSense to stop working properly, and an error is generated upon compiling.&lt;/p&gt;
&lt;p&gt;The scenario I&amp;#39;m referring to is enumerating over weakly typed collections. This is common when working with COM, Microsoft Office interop, an &lt;code&gt;ArrayList&lt;/code&gt;, and any collection that returns a non-generic &lt;code&gt;IEnumerable&lt;/code&gt; (i.e., an &lt;code&gt;IEnumerable&amp;lt;object&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll use this simple &lt;code&gt;Car&lt;/code&gt; class to demonstrate in the upcoming examples:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Car
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Make { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; Model { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; IsHybrid { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; make, &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; model, &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; isHybrid)
    {
        Make = make;
        Model = model;
        IsHybrid = isHybrid;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, consider the following example:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cars = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList()
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Car(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BMW&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;335i&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;),
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Car(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Infiniti&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;G37&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;),
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Car(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Toyota&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Prius&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
};

&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cars)
{
    Console.WriteLine(c.Make);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I write the line inside the foreach loop, I immediately notice something fishy. When I type &lt;code&gt;&amp;quot;c.&amp;quot;&lt;/code&gt; the IntelliSense suggestions pop up, but the properties on the &lt;code&gt;Car&lt;/code&gt; class are missing! I expect to see &lt;code&gt;Make&lt;/code&gt;, &lt;code&gt;Model&lt;/code&gt;, and &lt;code&gt;IsHybrid&lt;/code&gt; in the popup, but they are visibly absent. What gives?&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
    &lt;img src=&quot;http://softwareninjaneer.com/images/CarNoIntelliSense.png&quot; alt=&quot;Screenshot of IntelliSense and missing properties&quot; title=&quot;Car object missing properties&quot;&gt;
    &lt;p&gt;Screenshot of IntelliSense and missing properties&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;ArrayList&lt;/code&gt; returns an &lt;code&gt;IEnumerable&amp;lt;object&amp;gt;&lt;/code&gt; the usage of &lt;code&gt;var&lt;/code&gt; results in the variable &lt;code&gt;c&lt;/code&gt; being an &lt;code&gt;object&lt;/code&gt; type. With this in mind, it makes sense that the only IntelliSense items available are the ones that are defined on all objects.&lt;/p&gt;
&lt;p&gt;Ignoring this early warning that something is amiss, attempting to compile the code would generate this error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#39;object&amp;#39; does not contain a definition for &amp;#39;Make&amp;#39; and no extension method &amp;#39;Make&amp;#39; accepting a first argument of type &amp;#39;object&amp;#39; could be found (are you missing a using directive or an assembly reference?)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;workaround-1-be-explicit&quot;&gt;Workaround #1: Be explicit&lt;/h3&gt;
&lt;p&gt;The most straightforward solution is to use an explicitly typed local variable. In this case, we would use &lt;code&gt;Car&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt;. The updated code will make IntelliSense work as expected, and compiles correctly.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (Car c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cars)
{
    Console.WriteLine(c.Make);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what&amp;#39;s the difference and why does this approach work? Allow me to refer to the C# language specification in order to &amp;quot;PhD things up,&amp;quot; as one of my co-workers fondly enjoys accusing me of doing occasionally! Essentially, it works because an implicit cast is occurring within the foreach. Section 8.8.4 of the spec (version 4.0) details how the &lt;code&gt;foreach&lt;/code&gt; statement determines the type when &lt;code&gt;var&lt;/code&gt; is specified. A bunch of steps take place to determine the type, and they are beyond the scope of this post, however the relevant part of the spec that this falls under occurs when the compiler checks for an enumerable interface. In particular, the spec states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Otherwise, if there is an implicit conversion from X to the System.Collections.IEnumerable interface, then the collection type is this interface, the enumerator type is the interface System.Collections.IEnumerator, and the element type is object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The spec also shows the individual components of the &lt;code&gt;foreach&lt;/code&gt; statement and its expansion, which clarifies how the casting occurs.&lt;/p&gt;
&lt;h3 id=&quot;workaround-2-linq-to-the-rescue-&quot;&gt;Workaround #2: LINQ to the rescue!&lt;/h3&gt;
&lt;p&gt;With LINQ we can use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb341406.aspx&quot;&gt;Enumerable.Cast method&lt;/a&gt; (or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb360913.aspx&quot;&gt;Enumerable.OfType&lt;/a&gt;) to cast all the elements of the &lt;code&gt;IEnumerable&lt;/code&gt; to a given type. In our case, we will specify a &lt;code&gt;Car&lt;/code&gt; type and the result will be a strongly-typed &lt;code&gt;IEnumerable&amp;lt;Car&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cars.Cast&amp;lt;Car&amp;gt;())
{
    Console.WriteLine(c.Make);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The equivalent query syntax is:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; Car c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cars
            &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; c;

&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; query)
{
    Console.WriteLine(c.Make);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the range variable &lt;code&gt;c&lt;/code&gt; is explicitly typed in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb383978.aspx&quot;&gt;from clause&lt;/a&gt; and omitting the type by writing &lt;code&gt;from c in cars&lt;/code&gt; would have generated this compile-time error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could not find an implementation of the query pattern for source type &amp;#39;System.Collections.ArrayList&amp;#39;.  &amp;#39;Select&amp;#39; not found.  Consider explicitly specifying the type of the range variable &amp;#39;c&amp;#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Normally, when working with data sources which implement IEnumerable&lt;T&gt;, we can omit the type since the compiler infers it.&lt;/p&gt;
&lt;p&gt;While the above approaches illustrate the point, the first workaround is the preferred way to deal with this issue unless we plan to do more with the LINQ query. The &lt;code&gt;Enumerable&lt;/code&gt; methods are beneficial when constructing a larger LINQ query, allowing us to chain multiple extension methods together. Understanding how &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb383977.aspx&quot;&gt;extension methods&lt;/a&gt; work is vital to appreciate how this all fits together.&lt;/p&gt;
&lt;p&gt;In brief, &lt;code&gt;Enumerable.Cast&lt;/code&gt; extends the &lt;code&gt;IEnumerable&lt;/code&gt; type, which is why it is available for use on the &lt;code&gt;cars ArrayList&lt;/code&gt;. The result is a strongly-typed &lt;code&gt;IEnumerable&amp;lt;Car&amp;gt;&lt;/code&gt;. Since a large majority of extension methods extend &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, we can begin to use them after using the &lt;code&gt;Cast&lt;/code&gt; or &lt;code&gt;OfType&lt;/code&gt; extension methods. Even &lt;code&gt;Enumerable.Select&lt;/code&gt;, the most basic of extension methods, isn&amp;#39;t available until one of the aforementioned extension methods is used.&lt;/p&gt;
&lt;p&gt;As an example of method chaining, the following query can be used to group hybrid and non-hybrid cars together:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hybridGroups = cars.Cast&amp;lt;Car&amp;gt;().GroupBy(c =&amp;gt; c.IsHybrid);

&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; hybridGroups)
{
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0} Cars: {1}&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;.Key ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hybrid&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;Non-Hybrid&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;.Count());

    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;)
    {
        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;- {0} {1}&quot;&lt;/span&gt;, c.Make, c.Model);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/enumerating-weakly-typed-collections-with-implicitly-typed-variables&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/enumerating-weakly-typed-collections-with-implicitly-typed-variables&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/enumerating-weakly-typed-collections-with-implicitly-typed-variables';
		window.disqus_identifier = 'blog-enumerating-weakly-typed-collections-with-implicitly-typed-variables';
		window.disqus_title = 'Enumerating weakly typed collections with implicitly typed variables';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
		<entry>
			<title>Regex engine updated to allow timeouts in .NET 4.5</title>
			<link href="http://softwareninjaneer.com/blog/regex-engine-updated-to-allow-timeouts-in-net-4-5"/>
			<updated>2011-09-21T05:44:03.000Z</updated>
			<id>http://softwareninjaneer.com/blog/regex-engine-updated-to-allow-timeouts-in-net-4-5</id>
			<content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;!-- Meta --&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;

	&lt;!-- Use the .htaccess and remove these lines to avoid edge case issues.
		 More info: h5bp.com/i/378 --&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;

	&lt;!-- Our site title and description --&gt;
	&lt;title&gt;Regex engine updated to allow timeouts in .NET 4.5 | Ahmad Mageed - Software Ninjaneer&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;Ahmad Mageed on software engineering, .NET, C#, JavaScript, Regex and technology in general.&quot; /&gt;
	&lt;meta name=&quot;keywords&quot; content=&quot;software, engineering, development, regex, C#, JavaScript, AngularJS&quot; /&gt;
	&lt;meta name=&quot;author&quot; content=&quot;Ahmad Mageed&quot; /&gt;

	&lt;!-- Output DocPad produced meta elements --&gt;
	&lt;meta name=&quot;generator&quot; content=&quot;DocPad v6.63.3&quot; /&gt;

	&lt;!-- Mobile viewport optimized: h5bp.com/viewport --&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;

	&lt;!-- Icons --&gt;
		&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://softwareninjaneer.com/images/icons/favicon.ico&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;images/icons/apple-touch-icon-144-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;images/icons/apple-touch-icon-114-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;images/icons/apple-touch-icon-72-precomposed.png&quot;&gt;
		&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;images/icons/apple-touch-icon-57-precomposed.png&quot;&gt;

	&lt;!-- Shims: IE6-8 support of HTML5 elements --&gt;
	&lt;!--[if lt IE 9]&gt;
		&lt;script async src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
	&lt;![endif]--&gt;

	&lt;!-- Styles --&gt;
	&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&lt;link  rel=&quot;stylesheet&quot; href=&quot;http://softwareninjaneer.com/styles/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;!-- Menu --&gt;
	&lt;div class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;navbar-header&quot;&gt;
				&lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
					&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
				&lt;/button&gt;
				&lt;a class=&quot;navbar-brand&quot; href=&quot;http://softwareninjaneer.com/&quot;&gt;&lt;img src=&quot;http://softwareninjaneer.com/images/snlogo.png&quot;&gt;&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class=&quot;navbar-collapse collapse&quot;&gt;
				&lt;ul class=&quot;nav navbar-nav&quot;&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/blog&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/blog&quot; property=&quot;dc:title&quot;&gt;
								Blog Posts
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/regextra&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/regextra&quot; property=&quot;dc:title&quot;&gt;
								Regextra Project
							&lt;/a&gt;
						&lt;/li&gt;
					
						&lt;li
							typeof=&quot;sioc:Page&quot;
							about=&quot;http://softwareninjaneer.com/pages/about&quot;
							class=&quot;&quot;
						&gt;
							&lt;a href=&quot;http://softwareninjaneer.com/pages/about&quot; property=&quot;dc:title&quot;&gt;
								About Ahmad
							&lt;/a&gt;
						&lt;/li&gt;
					
				&lt;/ul&gt;
			&lt;/div&gt;&lt;!--/.navbar-collapse --&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Content --&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;!-- Content --&gt;
		&lt;section id=&quot;content&quot; class=&quot;content&quot;&gt;
			&lt;article id=&quot;post&quot; class=&quot;post&quot;&gt;
	&lt;h1&gt;Regex engine updated to allow timeouts in .NET 4.5&lt;/h1&gt;
	&lt;div class=&quot;post-date&quot;&gt;Tuesday, September 20, 2011&lt;/div&gt;
	&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;Many new features were listed as part of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms171868%28v=vs.110%29.aspx&quot;&gt;what&amp;#39;s new in the .NET Framework 4.5 Developer Preview&lt;/a&gt;, but the one that caught my eye was this Regex engine update:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Ability to limit how long the regular expression engine will attempt to resolve a regular expression before it times out.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eager to try this feature out I installed the &lt;a href=&quot;http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;amp;id=27543&quot;&gt;Visual Studio 11 Developer Preview&lt;/a&gt;. For what it&amp;#39;s worth, I initially setup the Windows 8 Developer Preview in VirtualBox and played with Visual Studio 11 there, but that&amp;#39;s not necessary. I later installed the VS 11 Developer Preview on my machine and it behaved nicely as a side by side install with VS 2010.&lt;/p&gt;
&lt;p&gt;At the time of this writing this post refers to the .NET Framework 4.5 Developer Preview. The current MSDN documentation about this new feature can be found &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c75he57e%28v=VS.110%29.aspx&quot;&gt;here&lt;/a&gt;. Should the implementation change in the RTM version I will try to update this post accordingly.&lt;/p&gt;
&lt;h2 id=&quot;why-is-this-feature-helpful-&quot;&gt;Why is this feature helpful?&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve written a few regular expressions the chances are you&amp;#39;ve encountered a pattern that caused the regex engine to take a lengthy amount of time to complete. Some might even claim that the engine hangs and they aren&amp;#39;t going to wait around to find out if a match is finally returned. Despite the excessive processing time you may have wound up with the correct result. However, the time spent may not be acceptable for your application.&lt;/p&gt;
&lt;p&gt;Here are a few scenarios where poor regex performance may occur:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accepting user supplied input to perform a search on data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accepting user supplied regex patterns to search data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working with large string inputs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using patterns that suffer from excessive backtracking, back-references, and other factors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-old-way-of-terminating-the-matching-process&quot;&gt;The old way of terminating the matching process&lt;/h3&gt;
&lt;p&gt;Imagine providing a web service that allows people to supply regex patterns to test them against their desired data. How do you prevent someone from maliciously - or accidentally - bringing down your service with a poor pattern? To address this concern developers would need to handle the regex task asynchronously, measure the amount of time elapsed, and abandon the task if it exceeds a reasonable period of time.&lt;/p&gt;
&lt;p&gt;Wouldn&amp;#39;t it be great if some timeout mechanism was built-in? Well, now we have just that! This feature addresses &lt;a href=&quot;http://connect.microsoft.com/VisualStudio/feedback/details/259625/regular-expression-regex-improvements-timeout-pattern-tester&quot;&gt;Connect feedback&lt;/a&gt; from 2007 and it&amp;#39;s great to see Microsoft continue to improve the regex engine.&lt;/p&gt;
&lt;h2 id=&quot;show-me-what-s-new-already-&quot;&gt;Show me what&amp;#39;s new already!&lt;/h2&gt;
&lt;p&gt;Alright! First I&amp;#39;ll cover the new pieces of the &lt;em&gt;Regex&lt;/em&gt; class, then I&amp;#39;ll demonstrate with some code.&lt;/p&gt;
&lt;p&gt;The .NET 4.5 &lt;em&gt;Regex&lt;/em&gt; class has been updated to include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;New overloaded constructors that accept a &lt;strong&gt;&lt;em&gt;matchTimeout&lt;/em&gt;&lt;/strong&gt; parameter of type &lt;em&gt;TimeSpan&lt;/em&gt;. This applies to both instances of the &lt;em&gt;Regex&lt;/em&gt; class and static usage of the class. If a timeout isn&amp;#39;t specified it will default to the application-wide default timeout value, if set, or the &lt;strong&gt;&lt;em&gt;InfiniteMatchTimeout&lt;/em&gt;&lt;/strong&gt; value otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for an application-wide default timeout value specified by setting the &lt;strong&gt;&amp;quot;REGEX_DEFAULT_MATCH_TIMEOUT&amp;quot;&lt;/strong&gt; property via the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.appdomain.setdata%28v=VS.110%29.aspx&quot;&gt;&lt;strong&gt;AppDomain.SetData&lt;/strong&gt;&lt;/a&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A static &lt;strong&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.infinitematchtimeout%28v=VS.110%29.aspx&quot;&gt;&lt;em&gt;InfiniteMatchTimeout&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; field member (&lt;em&gt;TimeSpan&lt;/em&gt;) which indicates that a pattern matching operation shouldn&amp;#39;t time out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;&lt;em&gt;MatchTimeout&lt;/em&gt;&lt;/strong&gt; property (&lt;em&gt;TimeSpan&lt;/em&gt;) representing the time-out interval of the current instance. When using the static methods this property can be accessed by handling the &lt;em&gt;RegexMatchTimeoutException&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should the &lt;em&gt;&lt;strong&gt;matchTimeout&lt;/strong&gt;&lt;/em&gt; be exceeded, or invalid, the following exceptions will be thrown with the given messages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regexmatchtimeoutexception%28v=VS.110%29.aspx&quot;&gt;&lt;em&gt;&lt;strong&gt;RegexMatchTimeoutException&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;: this exception is thrown when a timeout occurs. The message reads, &amp;quot;The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;ArgumentOutOfRangeException&lt;/strong&gt;&lt;/em&gt;: according to the class&amp;#39; metadata this is thrown when &amp;quot;&lt;em&gt;&lt;strong&gt;options&lt;/strong&gt;&lt;/em&gt; is not a valid &lt;em&gt;&lt;strong&gt;RegexOptions&lt;/strong&gt;&lt;/em&gt; value&amp;quot; or when &lt;em&gt;&amp;quot;&lt;/em&gt;&lt;strong&gt;&lt;em&gt;matchTimeout&lt;/em&gt;&lt;/strong&gt; is negative or greater than approximately 24 days.&amp;quot; The latter part is what&amp;#39;s new. Although it wasn&amp;#39;t mentioned explicitly, I found that a value of zero is also considered invalid, which should come as no surprise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Being aware of these two exceptions will be useful when working with the new feature. In addition, handling the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.typeinitializationexception.aspx&quot;&gt;&lt;strong&gt;TypeInitializationException&lt;/strong&gt;&lt;/a&gt; is useful when using the application-wide timeout default. I&amp;#39;ll demonstrate all of this in the subsequent sections that follow.&lt;/p&gt;
&lt;h3 id=&quot;introducing-a-poor-pattern&quot;&gt;Introducing a poor pattern&lt;/h3&gt;
&lt;p&gt;Consider this pattern: &lt;strong&gt;&lt;code&gt;([a-z ]+)*!&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a poor pattern with nested quantifiers that will cause excessive backtracking. It specifies a group that should be matched zero or more times (i.e., optional). The group contains a character class to match lowercase alphabets or the space character, one or more times. Finally, an exclamation mark should be matched.&lt;/p&gt;
&lt;p&gt;Now, consider this input: &lt;em&gt;&amp;quot;The quick brown fox jumps&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I tested the pattern with this input it took an average of 11 seconds to process. I tried using &lt;a href=&quot;http://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog&quot;&gt;the full pangram&lt;/a&gt; but it took way too long, so I stopped at the word &amp;quot;jumps&amp;quot; to get an idea of the processing time. As the string grows so will the time needed for the engine to complete it&amp;#39;s pattern matching attempt. This pattern has an exponential complexity of O(2n).&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re interested in the details of what makes this a poor pattern read up on &lt;a href=&quot;http://www.regular-expressions.info/catastrophic.html&quot;&gt;catastrophic backtracking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code for the above pattern and input looks like this:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The quick brown fox jumps&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;([a-z ]+)*!&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = Regex.IsMatch(input, pattern);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try it out. I&amp;#39;ll wait! Then try it with a longer input and continue reading this post. I suspect it&amp;#39;ll still be running long after you&amp;#39;re done reading.&lt;/p&gt;
&lt;h3 id=&quot;limiting-processing-time-with-the-matchtimeout-parameter&quot;&gt;Limiting processing time with the matchTimeout parameter&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s update the code to make it timeout after 4 seconds:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The quick brown fox jumps over the lazy dog.&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;([a-z ]+)*!&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matchTimeout = TimeSpan.FromSeconds(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = Regex.IsMatch(input, pattern,
                                RegexOptions.None,
                                matchTimeout);
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (RegexMatchTimeoutException ex)
{
    &lt;span class=&quot;hljs-comment&quot;&gt;// handle exception&lt;/span&gt;
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Match timed out!&quot;&lt;/span&gt;);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;- Timeout interval specified: &quot;&lt;/span&gt; + ex.MatchTimeout);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;- Pattern: &quot;&lt;/span&gt; + ex.Pattern);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;- Input: &quot;&lt;/span&gt; + ex.Input);
}

&lt;span class=&quot;hljs-comment&quot;&gt;/* Output:
Match timed out!
- Timeout interval specified: 00:00:04
- Pattern: ([a-z ]+)*!
- Input: The quick brown fox jumps over the lazy dog.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s all there is to it! Now the regex engine will give up and throw an exception if 4 seconds elapse. Also notice the helpful properties accessible from the &lt;em&gt;RegexMatchTimeoutException&lt;/em&gt; object.&lt;/p&gt;
&lt;h3 id=&quot;checking-the-specified-duration-with-the-matchtimeout-property&quot;&gt;Checking the specified duration with the MatchTimeout property&lt;/h3&gt;
&lt;p&gt;When using an instance of the &lt;em&gt;Regex&lt;/em&gt; class you have access to the &lt;em&gt;MatchTimeout&lt;/em&gt; property. In the following example I&amp;#39;ll use a &lt;em&gt;StopWatch&lt;/em&gt; and compare the time taken to match a new sentence.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The English alphabet has 26 letters&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;\d+&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matchTimeout = TimeSpan.FromMilliseconds(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sw = Stopwatch.StartNew();
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Regex(pattern, RegexOptions.None, matchTimeout);
    &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = re.IsMatch(input);
    sw.Stop();

    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Completed match in: &quot;&lt;/span&gt; + sw.Elapsed);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MatchTimeout specified: &quot;&lt;/span&gt; + re.MatchTimeout);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matched with {0} to spare!&quot;&lt;/span&gt;,
                         re.MatchTimeout.Subtract(sw.Elapsed));
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (RegexMatchTimeoutException ex)
{
    sw.Stop();
    Console.WriteLine(ex.Message);
}

&lt;span class=&quot;hljs-comment&quot;&gt;/* Output:
Completed match in: 00:00:00.0007495
MatchTimeout specified: 00:00:00.0100000
Matched with 00:00:00.0092505 to spare!
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;handling-invalid-matchtimeout-durations&quot;&gt;Handling invalid matchTimeout durations&lt;/h3&gt;
&lt;p&gt;What happens when we specify an invalid &lt;em&gt;matchTimeout&lt;/em&gt; value? As mentioned earlier, an &lt;em&gt;ArgumentOutOfRangeException&lt;/em&gt; will be thrown when &lt;em&gt;matchTimeout&lt;/em&gt; is either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Negative (see my comments on &lt;em&gt;Regex.InfiniteMatchTimeout&lt;/em&gt; next for an exception to the rule)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Greater than approximately 24 days&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To see this in action, let&amp;#39;s use the last case. I&amp;#39;m not sure how Microsoft decided on the ~24 day limit, but if you have a regex taking days to process I would question whether you&amp;#39;re using the right tool for the job.&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The quick brown fox jumps over the lazy dog.&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;([a-z ]+)*!&quot;&lt;/span&gt;;

&lt;span class=&quot;hljs-comment&quot;&gt;// invalid timeout of 25 days&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matchTimeout = TimeSpan.FromDays(&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Regex(pattern, RegexOptions.None, matchTimeout);
    &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = re.IsMatch(input);
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ArgumentOutOfRangeException ex)
{
    Console.WriteLine(ex.Message);
}

&lt;span class=&quot;hljs-comment&quot;&gt;/* Output:
Specified argument was out of the range of valid values.
Parameter name: matchTimeout
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;to-infinity-and-beyond-&quot;&gt;To infinity... and beyond!&lt;/h3&gt;
&lt;p&gt;Oddly enough the &lt;em&gt;Regex.InfiniteMatchTimeout&lt;/em&gt; field has a negative &lt;em&gt;TimeSpan&lt;/em&gt; value of -00:00:00.0010000 (-1 ms) that, when passed as a &lt;em&gt;matchTimeout&lt;/em&gt; parameter, doesn&amp;#39;t cause the &lt;em&gt;ArgumentOutOfRangeException&lt;/em&gt; to be thrown. Talk about being exceptional!&lt;/p&gt;
&lt;p&gt;So what exactly is its purpose? As stated earlier it&amp;#39;s used as a default value that indicates a match should not timeout, which is essentially the original pre-.NET 4.5  behavior. It takes effect only when the application-wide default value isn&amp;#39;t set. Thus, it&amp;#39;s quite redundant to pass in as a parameter.&lt;/p&gt;
&lt;p&gt;To illustrate, these two regex instances share equivalent timeout values (when no application-wide default value is present):&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;\d+&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Regex(pattern);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reInfinite = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Regex(pattern, RegexOptions.None, Regex.InfiniteMatchTimeout);
Console.WriteLine(re.MatchTimeout == reInfinite.MatchTimeout);
&lt;span class=&quot;hljs-comment&quot;&gt;// Output: True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;application-wide-default-match-timeout&quot;&gt;Application-wide default match timeout&lt;/h2&gt;
&lt;p&gt;To specify an application-wide default timeout value for all regex operations in an application domain you need to set the &lt;strong&gt;&amp;quot;REGEX_DEFAULT_MATCH_TIMEOUT&amp;quot;&lt;/strong&gt; property. Any regex operation or instance declaration will then use the value assigned to that &lt;em&gt;AppDomain&lt;/em&gt; property.&lt;/p&gt;
&lt;h3 id=&quot;setting-the-appdomain-default-value&quot;&gt;Setting the AppDomain default value&lt;/h3&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The quick brown fox jumps over the lazy dog.&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;([a-z ]+)*!&quot;&lt;/span&gt;;

&lt;span class=&quot;hljs-comment&quot;&gt;// AppDomain default set somewhere in your application&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; defaultMatchTimeout = TimeSpan.FromSeconds(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
AppDomain.CurrentDomain.SetData(&lt;span class=&quot;hljs-string&quot;&gt;&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;&lt;/span&gt;,
                                defaultMatchTimeout);

&lt;span class=&quot;hljs-comment&quot;&gt;// regex use elsewhere...&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sw = Stopwatch.StartNew();
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = Regex.IsMatch(input, pattern);
    sw.Stop();
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (RegexMatchTimeoutException ex)
{
    sw.Stop();
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Match timed out!&quot;&lt;/span&gt;);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Applied Default: &quot;&lt;/span&gt; + ex.MatchTimeout);
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ArgumentOutOfRangeException ex)
{
    sw.Stop();
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (TypeInitializationException ex)
{
    sw.Stop();
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;TypeInitializationException: &quot;&lt;/span&gt; + ex.Message);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;InnerException: {0} - {1}&quot;&lt;/span&gt;,
        ex.InnerException.GetType().Name, ex.InnerException.Message);
}

Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AppDomain Default: {0}&quot;&lt;/span&gt;,
    AppDomain.CurrentDomain.GetData(&lt;span class=&quot;hljs-string&quot;&gt;&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;&lt;/span&gt;));
Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stopwatch: &quot;&lt;/span&gt; + sw.Elapsed);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woah! What&amp;#39;s with all that code?! Most of the code is clear. A default value is set in the &lt;em&gt;AppDomain&lt;/em&gt; somewhere in your application. Then a regex operation is used without specifying a &lt;em&gt;matchTimeout&lt;/em&gt; value and the RegexMatchTimeoutException will be thrown. When the exception is caught it prints out the applied &lt;em&gt;MatchTimeout&lt;/em&gt;, which should be the 2 seconds specified for the &lt;em&gt;AppDomain&lt;/em&gt; property. Finally the &lt;em&gt;AppDomain&lt;/em&gt; property is displayed, along with the elapsed &lt;em&gt;Stopwatch&lt;/em&gt; time. The output should be similar to this:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Output:
Match timed out!
Applied Default: 00:00:02
AppDomain Default: 00:00:02
Stopwatch: 00:00:02.0322906
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, notice the catch block that handles the &lt;em&gt;TypeInitializationException&lt;/em&gt;. Re-run the code but this time use a negative (invalid) value for the &lt;em&gt;defaultMatchTimeout&lt;/em&gt; variable. When the &lt;em&gt;AppDomain&lt;/em&gt; property is invalid the &lt;em&gt;Regex&lt;/em&gt; class throws this type of exception and the output of the code above then resembles this:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Output:
TypeInitializationException: The type initializer for
'System.Text.RegularExpressions.Regex' threw an exception.
InnerException: ArgumentOutOfRangeException - Specified argument was out of the
range of valid values.
Parameter name: AppDomain data 'REGEX_DEFAULT_MATCH_TIMEOUT' contains an invalid
value or object for specifying a default matching timeout for
System.Text.RegularExpressions.Regex.
AppDomain Default: -00:00:02
Stopwatch: 00:00:00.0550294
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;overriding-the-appdomain-default-value&quot;&gt;Overriding the AppDomain default value&lt;/h3&gt;
&lt;p&gt;While you may want to use the application-wide default value in most cases, there are times when you want certain regex operations to use different values. Overriding the &lt;em&gt;AppDomain&lt;/em&gt; default is as easy as specifying the &lt;em&gt;matchTimeout&lt;/em&gt; parameter.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&quot;hljs&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; defaultMatchTimeout = TimeSpan.FromSeconds(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);
AppDomain.CurrentDomain.SetData(&lt;span class=&quot;hljs-string&quot;&gt;&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;&lt;/span&gt;,
                                defaultMatchTimeout);

&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;The quick brown fox jumps over the lazy dog.&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; pattern = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;([a-z ]+)*!&quot;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sw = Stopwatch.StartNew();
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; matchTimeout = TimeSpan.FromSeconds(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; result = Regex.IsMatch(input, pattern, RegexOptions.None, matchTimeout);
    sw.Stop();
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (RegexMatchTimeoutException ex)
{
    sw.Stop();
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Match timed out!&quot;&lt;/span&gt;);
    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Applied Default: &quot;&lt;/span&gt; + ex.MatchTimeout);
}

Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;AppDomain Default: {0}&quot;&lt;/span&gt;,
    AppDomain.CurrentDomain.GetData(&lt;span class=&quot;hljs-string&quot;&gt;&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;&lt;/span&gt;));
Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stopwatch: &quot;&lt;/span&gt; + sw.Elapsed);

&lt;span class=&quot;hljs-comment&quot;&gt;/* Output:
Match timed out!
Applied Default: 00:00:02
AppDomain Default: 00:00:05
Stopwatch: 00:00:02.0256260
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;recognizing-the-underlying-issues&quot;&gt;Recognizing the underlying issues&lt;/h2&gt;
&lt;p&gt;While this new feature is great, it&amp;#39;s important to be cognizant of the underlying issues. Look back at the reasons listed for poor regex performance and ponder over them.&lt;/p&gt;
&lt;p&gt;I think this feature is ideal for people who are writing services or features that accept user input. It&amp;#39;s now a breeze to put an end to potentially rampant patterns. A reasonable timeout duration could be set, or it may even be dynamically assigned based on upfront checks of pattern length and input length for flexibility.&lt;/p&gt;
&lt;p&gt;That said, if you&amp;#39;re the author of poorly performing patterns then using this as a crutch to fall back on isn&amp;#39;t acceptable. Simply put, take regular expressions seriously and learn to write better patterns by understanding the shortcomings and characteristics of bad patterns.&lt;/p&gt;
&lt;h2 id=&quot;conclusion-default-values-existing-regex-utilization-and-guidance&quot;&gt;Conclusion: Default values, existing Regex utilization and guidance&lt;/h2&gt;
&lt;p&gt;By default the &lt;em&gt;Regex&lt;/em&gt; class will not timeout. So what should we do about previous uses of &lt;em&gt;Regex&lt;/em&gt; in our projects, if anything? The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex%28v=VS.110%29.aspx&quot;&gt;MSDN documentation&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We recommend that you set a time-out value in all regular expression pattern-matching operations. For more information, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/gg578045%28v=VS.110%29.aspx&quot;&gt;Best Practices for Regular Expressions in the .NET Framework&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have some reservations about doing that all the time. I suggest leaving them alone, for the most part. There&amp;#39;s no need to hunt down all your regular expressions just to assign a timeout duration to them. That would entail identifying their current performance in order to avoid setting low timeout durations that would cause them to fail. Instead, focus on the patterns with poor performance, time critical usages, or areas where user input is used. If you&amp;#39;re aware of problem areas, then by all means apply the &lt;em&gt;matchTimeout&lt;/em&gt; to them individually after determining reasonable timeout limits.&lt;/p&gt;
&lt;p&gt;I would caution against specifying an &lt;em&gt;AppDomain&lt;/em&gt; level default timeout and walking away. Again, knowing your patterns and scenarios make a huge difference in what strategy to employ. An &lt;em&gt;AppDomain&lt;/em&gt; default is appropriate when you want to set an absolute maximum timeout limit for all your &lt;em&gt;Regex&lt;/em&gt; operations to prevent a pattern&amp;#39;s performance from catching you by surprise. With that guard in place you should then identify any patterns you believe need more time and override those values directly. This could also present an opportunity to incorporate unit tests of your patterns to ensure timeouts occur within the expected interval, or that they pass successfully before the limit is reached.&lt;/p&gt;
&lt;p&gt;Bear in mind that you&amp;#39;ll want to add exception handling too. Handle the &lt;em&gt;RegexMatchTimeoutException&lt;/em&gt; to cover timeouts, and handle the &lt;em&gt;ArgumentOutOfRangeException&lt;/em&gt; when dynamically applying a &lt;em&gt;matchTimeout&lt;/em&gt; value.&lt;/p&gt;
&lt;p&gt;Despite the addition of this feature, most operations execute fairly quickly, usually in the milliseconds to early seconds range. When determining reasonable timeout intervals the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.matchtimeout%28v=vs.110%29.aspx&quot;&gt;MSDN documentation&lt;/a&gt; suggests taking the following factors into consideration:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.&lt;/li&gt;
&lt;li&gt;The expected machine load. Processing takes more time on systems with high CPU and memory utilization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;To add to that advice, the length of the input is another factor to consider.&lt;/p&gt;
&lt;p&gt;Overall I&amp;#39;m pleased with the addition of this feature and think it provides a simple approach to managing performance concerns without the need of writing ugly workarounds to address application responsiveness.&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;

&lt;div class=&quot;social-buttons&quot;&gt;&lt;div class=&quot;hacker-news-submit-button service-button&quot;&gt;
	&lt;a href=&quot;http://news.ycombinator.com/submit&quot; class=&quot;hn-share-button&quot; data-url=&quot;http://softwareninjaneer.com/blog/regex-engine-updated-to-allow-timeouts-in-net-4-5&quot;&gt;Vote on HN&lt;/a&gt;
	&lt;script&gt;
		(function(d, t) {
			var g = d.createElement(t),
				s = d.getElementsByTagName(t)[0];
				g.src = '//hnbutton.appspot.com/static/hn.min.js';
			s.parentNode.insertBefore(g, s);
		}(document, 'script'));
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;reddit-submit-button service-button&quot;&gt;
	&lt;script type=&quot;text/javascript&quot; src=&quot;http://en.reddit.com/static/button/button1.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;google-plus-one-button service-button&quot;&gt;
	&lt;div class=&quot;g-plusone&quot; data-size=&quot;medium&quot; data-href=&quot;http%3A//softwareninjaneer.com/blog/regex-engine-updated-to-allow-timeouts-in-net-4-5&quot;&gt;&lt;/div&gt;
	&lt;script&gt;
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();
	&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-tweet-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;amageed&quot; data-related=&quot;amageed&quot;&gt;Tweet&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;twitter-follow-button service-button&quot;&gt;
	&lt;a href=&quot;https://twitter.com/amageed&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot;&gt;Follow @amageed&lt;/a&gt;
	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
	(function(){
		window.disqus_shortname = 'softwareninjaneer';
		window.disqus_developer = '1';
		window.disqus_url = 'http://softwareninjaneer.com/blog/regex-engine-updated-to-allow-timeouts-in-net-4-5';
		window.disqus_identifier = 'blog-regex-engine-updated-to-allow-timeouts-in-net-4-5';
		window.disqus_title = 'Regex engine updated to allow timeouts in .NET 4.5';
		if ( window.DISQUS ) {
			return DISQUS.reset({
				reload: true,
				config: function () {
					this.page.identifier = window.disqus_identifier;
					this.page.url = window.disqus_url;
					this.page.title = window.disqus_title;
				}
			});
		}
		else {
		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
		}
	})();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;

&lt;footer&gt;
	
&lt;/footer&gt;
		&lt;/section&gt;

		&lt;!-- Footer --&gt;
		&lt;footer&gt;
			&lt;hr /&gt;
			&lt;div class=&quot;pull-left&quot;&gt;
				&lt;p&gt;&amp;copy; &lt;a href=&quot;pages/about&quot;&gt;Ahmad Mageed&lt;/a&gt; 2015&lt;/p&gt;
				&lt;p&gt;
				&lt;a href=&quot;http://stackoverflow.com/users/59111/ahmad-mageed&quot;&gt;&lt;img src=&quot;http://stackoverflow.com/users/flair/59111.png?theme=dark&quot; width=&quot;208&quot; height=&quot;58&quot; alt=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot; title=&quot;profile for Ahmad Mageed at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers&quot;&gt;&lt;/a&gt;
				&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class=&quot;pull-right&quot;&gt;
				&lt;p&gt;&lt;small&gt;Disclaimer: The opinions expressed herein are my own personal opinions and do not represent my employer's view in any way&lt;/small&gt;&lt;/p&gt;
			&lt;/div&gt;
		&lt;/footer&gt;
	&lt;/div&gt;&lt;!-- /container --&gt;

	&lt;!-- Scripts --&gt;
	&lt;script &gt;(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-25934924-1');
ga('send', 'pageview');&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/scripts/jquery.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&quot;&gt;&lt;/script&gt;&lt;script defer=&quot;defer&quot;  src=&quot;http://softwareninjaneer.com/vendor/twitter-bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
		</entry>
	
</feed>